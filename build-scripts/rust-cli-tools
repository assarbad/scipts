#!/usr/bin/env bash
[[ -t 1 ]] && { cG="\e[1;32m"; cR="\e[1;31m"; cB="\e[1;34m"; cW="\e[1;37m"; cY="\e[1;33m"; cG_="\e[0;32m"; cR_="\e[0;31m"; cB_="\e[0;34m"; cW_="\e[0;37m"; cY_="\e[0;33m"; cZ="\e[0m"; export cR cG cB cY cW cR_ cG_ cB_ cY_ cW_ cZ; }
for tool in cp date dirname mkdir readlink tee grep ldd rustup sort strip tar xz cargo; do type $tool > /dev/null 2>&1 || { echo -e "${cR}ERROR:${cZ} couldn't find '$tool' which is required by this script."; exit 1; }; done
pushd $(dirname $0) > /dev/null; CURRABSPATH=$(readlink -nf "$(pwd)"); popd > /dev/null; # Get the directory in which the script resides
TARGET=${TARGET:-x86_64-unknown-linux-musl}
if ! rustup target list --installed|grep -q "$TARGET"; then
	echo -e "${cR}ERROR:${cZ} missing Rust target ${cW}${TARGET}${cZ}."
	echo -e "\nUse: ${cW}rustup target install ${TARGET}${cZ} to install"
	exit 1
fi
# Possible sources for interesting stuff: https://lib.rs + crates.io + cli.rs

# These can be installed using 'cargo install' and statically linked against musl libc
SIMPLE_INSTALLS="\
ripgrep:rg:github.com/BurntSushi/ripgrep
vivid:github.com/sharkdp/vivid
pastel:github.com/sharkdp/pastel
hexyl:github.com/sharkdp/hexyl
hyperfine:github.com/sharkdp/hyperfine
fd-find:fd:github.com/sharkdp/fd
bat:github.com/sharkdp/bat
git-delta:delta:github.com/dandavison/delta
bottom:github.com/ClementTsang/bottom
oxipng:github.com/shssoichiro/oxipng
exa:github.com/ogham/exa
sd:github.com/chmln/sd
gitui:github.com/extrawurst/gitui
du-dust:dust:github.com/bootandy/dust
dutree:github.com/nachoparker/dutree
rustscan:github.com/rustscan/rustscan
tokei:lib.rs/crates/tokei
zoxide:lib.rs/crates/zoxide
jql:github.com/yamafaktory/jql
lsd:github.com/Peltoche/lsd
watchexec:github.com/watchexec/watchexec
verco:github.com/matheuslessarodrigues/verco
broot:github.com/canop/broot
skim:sk:github.com/lotabout/skim
lolcate-rs:lolcate:github.com/ngirard/lolcate-rs
dupe-krill:github.com/kornelski/dupe-krill
bingrep:github.com/m4b/bingrep
scout:github.com/jhbabon/scout
zrs:github.com/fauxfaux/zrs
fddf:lib.rs/crates/fddf
rnr:github.com/chuckdaniels87/rnr
perftacho:github.com/qrider71/tacho
git-global:github.com/peap/git-global
licensor:github.com/raftario/licensor
procs:github.com/dalance/procs
kmon:github.com/orhun/kmon
viu:github.com/atanunq/viu
bandwhich:github.com/imsnif/bandwhich
b3sum:github.com/BLAKE3-team/BLAKE3
vcprompt:github.com/sscherfke/rust-vcprompt
romodoro:github.com/michaelfletchercgy/romodoro
gitall:github.com/mattmahn/gitall.rs
dirstat-rs:dirstat:github.com/scullionw/dirstat-rs
treesum:github.com/anderejd/treesum
diffr:github.com/mookid/diffr
"

function cargo_install
{
	local BINNAME="$1"
	local CRATENAME="$2"
	local HTTPS_URL="$3"
	local TARGET="$4"
	local TGTDIR="$5"
	# Binaries go into subfolder named ./bin underneath --root
	( set -x; cargo install --target "$TARGET" "$CRATENAME" --target-dir "$TGTDIR/crates/$CRATENAME" --root "$TGTDIR" ) && return 0 || return 1
	if [[ -x "$TGTDIR/bin/$BINNAME" ]]; then
		if ! ldd "$TGTDIR/bin/$BINNAME"|grep -q 'statically linked'; then
			echo -e "${cY}WARNING:${cZ} ${cW}$BINNAME${cZ} (crate ${cW}$CRATENAME${cZ}) did not come out statically linked!"
		fi
	elif [[ ! -f "$TGTDIR/bin/$BINNAME" ]]; then
		echo -e "${cY}WARNING:${cZ} did not find a file named ${cW}$BINNAME${cZ} for crate ${cW}$CRATENAME${cZ}. Do the crate name and binary name differ?"
	fi
}

function simple_install
{
	local TGTDIR="$2"
	# Cut the shortest match from back
	local CRATENAME="${1%:*}"
	# ... longest match from start
	local HTTPS_URL="https://${1##*:}"
	local BINNAME="${CRATENAME##*:}"
	if [[ -n "$BINNAME" ]] && [[ "$BINNAME" != "$CRATENAME" ]]; then
		CRATENAME=${CRATENAME%:*}
	fi
	cargo_install "$BINNAME" "$CRATENAME" "$HTTPS_URL" "$TARGET" "$TGTDIR" || exit 1
}

function strip_and_store_binaries
{
	local SRCDIR="$1"
	local NOWDATE=$(date +"%Y-%m-%dT%H-%M-%S")
	local TGTDIR="$SRCDIR/${NOWDATE}_rust-cli-tools" # output folder ... inside temporary folder until we're successful
	( cd "${TGTDIR%/*}"; set -x; mkdir -p "${TGTDIR##*/}"/{stripped,unstripped} ) || { echo -e "${cR}ERROR:${cZ} failed to create staging area for output"; exit 1; }
	( set -x; cp -a "$SRCDIR/bin"/* "$TGTDIR/unstripped/" ) || { echo -e "${cR}ERROR:${cZ} failed to copy unstripped binaries"; exit 1; }
	# Strip binaries into different path
	find "$TGTDIR" -type f -executable -printf '%P\n'|while read fname; do
		( cd "$TGTDIR"; set -x; strip -o "${fname//unstripped/stripped}" --strip-unneeded "$fname" ) || { echo -e "${cR}ERROR:${cZ} failed to process ${cW}$fname${cZ}"; exit 1; }
		if ! ldd "$TGTDIR/$fname"|grep -q 'statically linked'; then
			echo "WARNING: $fname did not come out statically linked!"|tee -a "$TGTDIR/warnings.txt"
		fi
	done || { echo -e "${cR}ERROR:${cZ} failed to process unstripped files"; exit 1; }
	# Now compute the hashes
	find "$TGTDIR" -type f -executable -printf '%P\n'|sort|while read fname; do
		( cd "$TGTDIR"; set -x; sha256sum $fname ) || { echo -e "${cR}ERROR:${cZ} failed to compute hash for ${cW}$fname${cZ}"; exit 1; }
	done | tee "$TGTDIR/SHA256SUMS"
	cargo install --root "$SRCDIR" --list|tee "$TGTDIR/manifest.txt"
	( CURRDIR="$(pwd)"; set -x; tar -cJvf "$CURRDIR/${NOWDATE}_rust-cli-tools.txz" -C "$TGTDIR" . ) || { echo -e "${cR}ERROR:${cZ} failed to package built binaries"; exit 1; }
	#cargo install --root /home/oliver/scripts/build-scripts/cache/tmp.ISqLgK7rXq --list
}

# Allow TEMPDIR to be overridden via the environment
[[ -n "$TEMPDIR" ]] || TEMPDIR="$(mktemp -dp "$(pwd)/cache")"
# Ensure we clean up after ourselves in any case
trap 'echo "Removing temporary directory"; ( set -x; rm -rf "'$TEMPDIR'" ); trap - INT TERM EXIT; exit $?' INT TERM EXIT
for tool in $SIMPLE_INSTALLS; do
	simple_install "$tool" "$TEMPDIR"
done
strip_and_store_binaries "$TEMPDIR"
# Clean exit
trap - INT TERM EXIT
