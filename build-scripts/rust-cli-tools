#!/usr/bin/env bash
# Possible sources for interesting Rust-based stuff: https://lib.rs + crates.io + cli.rs
TARGET=${TARGET:-x86_64-unknown-linux-musl}
TEMPDIR=${TEMPDIR:-"$(mktemp -dp "$(pwd)/cache")"}
[[ -t 1 ]] && { cG="\e[1;32m"; cR="\e[1;31m"; cB="\e[1;34m"; cW="\e[1;37m"; cY="\e[1;33m"; cG_="\e[0;32m"; cR_="\e[0;31m"; cB_="\e[0;34m"; cW_="\e[0;37m"; cY_="\e[0;33m"; cZ="\e[0m"; export cR cG cB cY cW cR_ cG_ cB_ cY_ cW_ cZ; }
for tool in cp date dirname mkdir readlink tee grep ldd rustup sort strip tar xz cargo; do type $tool > /dev/null 2>&1 || { echo -e "${cR}ERROR:${cZ} couldn't find '$tool' which is required by this script."; exit 1; }; done
pushd $(dirname $0) > /dev/null; CURRABSPATH=$(readlink -nf "$(pwd)"); popd > /dev/null; # Get the directory in which the script resides
if ! rustup target list --installed|grep -q "$TARGET"; then
	echo -e "${cR}ERROR:${cZ} missing Rust target ${cW}${TARGET}${cZ}."
	echo -e "\nUse: ${cW}rustup target install ${TARGET}${cZ} to install"
	exit 1
fi
# These can be installed using 'cargo install' and statically linked against musl libc
SIMPLE_INSTALLS="\
b3sum:BLAKE3-team/BLAKE3
bandwhich:imsnif/bandwhich
bat:sharkdp/bat
bingrep:m4b/bingrep
bottom:btm:ClementTsang/bottom
broot:canop/broot
diffr:mookid/diffr
dirstat-rs:dirstat:scullionw/dirstat-rs
du-dust:dust:bootandy/dust
dupe-krill:kornelski/dupe-krill
dutree:nachoparker/dutree
exa:ogham/exa
fd-find:fd:sharkdp/fd
fddf:lib.rs/crates/fddf
git-delta:delta:dandavison/delta
git-global:peap/git-global
gitall:mattmahn/gitall.rs
gitui:extrawurst/gitui
hexyl:sharkdp/hexyl
hyperfine:sharkdp/hyperfine
jql:yamafaktory/jql
kmon:orhun/kmon
licensor:raftario/licensor
lolcate-rs:lolcate:ngirard/lolcate-rs
lsd:Peltoche/lsd
oxipng:shssoichiro/oxipng
pastel:sharkdp/pastel
perftacho:qrider71/tacho
procs:dalance/procs
ripgrep:rg:BurntSushi/ripgrep
rnr:chuckdaniels87/rnr
romodoro:michaelfletchercgy/romodoro
rustscan:rustscan/rustscan
scout:jhbabon/scout
sd:chmln/sd
skim:sk:lotabout/skim
tokei:lib.rs/crates/tokei
treesum:anderejd/treesum
vcprompt:sscherfke/rust-vcprompt
verco:matheuslessarodrigues/verco
viu:atanunq/viu
vivid:sharkdp/vivid
watchexec:watchexec/watchexec
zoxide:lib.rs/crates/zoxide
zrs:fauxfaux/zrs
"
# Candidates which require building a (static) OpenSSL via musl-gcc and using [ env OPENSSL_DIR=$(pwd)/openssl-dir ]
# TAG=OpenSSL_1_1_1h
# git clone --depth 1 --branch $TAG https://github.com/openssl/openssl.git
# env CC=musl-gcc ./config
# ... this appears to default to musl-gcc for some weird reason ...
# https://github.com/sabotage-linux/kernel-headers.git (OpenSSL requires at least linux/mman.h)
# git clean -dfx; PREFIX=$(realpath -L $(pwd)/../openssl-dir); env CC=musl-gcc CPPFLAGS="-I $(realpath -eL ../kernel-headers/x86/include) -I$(realpath -eL ../kernel-headers/generic/include)" bash -c "test -d '$PREFIX' && rm -rf '$PREFIX'; mkdir '$PREFIX'; ./config --prefix=$PREFIX no-engine no-shared no-threads no-ts && make -j 20"
OPENSSL_FIX_INSTALLS="\
git-project:kroger-technology/git-project
gitout:jakewharton/gitout
mdcat:lunaryorn/mdcat
repo-cli:repo:edeneast/repo
repofetch:spenserblack/repofetch
starship:starship/starship
"

function cargo_install
{
	local BINNAME="$1"
	local CRATENAME="$2"
	local HTTPS_URL="$3"
	local TARGET="$4"
	local TGTDIR="$5"
	# Binaries go into subfolder named ./bin underneath --root
	( set -x; cargo install --target "$TARGET" "$CRATENAME" --target-dir "$TGTDIR/crates/$CRATENAME" --root "$TGTDIR" ) && return 0 || return 1
	if [[ -x "$TGTDIR/bin/$BINNAME" ]]; then
		if ! ldd "$TGTDIR/bin/$BINNAME"|grep -q 'statically linked'; then
			echo -e "${cY}WARNING:${cZ} ${cW}$BINNAME${cZ} (crate ${cW}$CRATENAME${cZ}) did not come out statically linked!"
		fi
	elif [[ ! -f "$TGTDIR/bin/$BINNAME" ]]; then
		echo -e "${cY}WARNING:${cZ} did not find a file named ${cW}$BINNAME${cZ} for crate ${cW}$CRATENAME${cZ}. Do the crate name and binary name differ?"
	fi
}

function simple_install
{
	# if crate name is some special marker (e.g. .), use cargo install --git $URL
	local TGTDIR="$2"
	# Cut the shortest match from back
	local CRATENAME="${1%:*}"
	# ... longest match from start
	local GITHUB_URL="https://github.com/${1##*:}"
	local BINNAME="${CRATENAME##*:}"
	if [[ -n "$BINNAME" ]] && [[ "$BINNAME" != "$CRATENAME" ]]; then
		CRATENAME=${CRATENAME%:*}
	fi
	cargo_install "$BINNAME" "$CRATENAME" "$GITHUB_URL" "$TARGET" "$TGTDIR" || exit 1
}

function strip_and_store_binaries
{
	local SRCDIR="$1"
	local NOWDATE=$(date +"%Y-%m-%dT%H-%M-%S")
	local TGTDIR="$SRCDIR/${NOWDATE}_rust-cli-tools" # output folder ... inside temporary folder until we're successful
	( cd "${TGTDIR%/*}"; set -x; mkdir -p "${TGTDIR##*/}"/{stripped,unstripped} ) || { echo -e "${cR}ERROR:${cZ} failed to create staging area for output"; exit 1; }
	( set -x; cp -a "$SRCDIR/bin"/* "$TGTDIR/unstripped/" ) || { echo -e "${cR}ERROR:${cZ} failed to copy unstripped binaries"; exit 1; }
	# Strip binaries into different path
	find "$TGTDIR" -type f -executable -printf '%P\n'|while read fname; do
		( cd "$TGTDIR"; set -x; strip -o "${fname//unstripped/stripped}" --strip-unneeded "$fname" ) || { echo -e "${cR}ERROR:${cZ} failed to process ${cW}$fname${cZ}"; exit 1; }
		if ! ldd "$TGTDIR/$fname"|grep -q 'statically linked'; then
			echo "WARNING: $fname did not come out statically linked!"|tee -a "$TGTDIR/warnings.txt"
		fi
	done || { echo -e "${cR}ERROR:${cZ} failed to process unstripped files"; exit 1; }
	# Now compute the hashes
	find "$TGTDIR" -type f -executable -printf '%P\n'|sort|while read fname; do
		( cd "$TGTDIR"; set -x; sha256sum $fname ) || { echo -e "${cR}ERROR:${cZ} failed to compute hash for ${cW}$fname${cZ}"; exit 1; }
	done | tee "$TGTDIR/SHA256SUMS"
	cargo install --root "$SRCDIR" --list|tee "$TGTDIR/manifest.txt"
	( CURRDIR="$(pwd)"; set -x; tar -cJvf "$CURRDIR/${NOWDATE}_rust-cli-tools.txz" -C "$TGTDIR" . ) || { echo -e "${cR}ERROR:${cZ} failed to package built binaries"; exit 1; }
	#cargo install --root /home/oliver/scripts/build-scripts/cache/tmp.ISqLgK7rXq --list
}

# Ensure we clean up after ourselves in any case
trap 'echo "Removing temporary directory"; ( set -x; rm -rf "'$TEMPDIR'" ); trap - INT TERM EXIT; exit $?' INT TERM EXIT
for tool in $SIMPLE_INSTALLS; do
	simple_install "$tool" "$TEMPDIR"
done
strip_and_store_binaries "$TEMPDIR"
# Clean exit
trap - INT TERM EXIT
