#!/usr/bin/env bash
[[ -t 1 ]] && { cG="\e[1;32m"; cR="\e[1;31m"; cB="\e[1;34m"; cW="\e[1;37m"; cY="\e[1;33m"; cG_="\e[0;32m"; cR_="\e[0;31m"; cB_="\e[0;34m"; cW_="\e[0;37m"; cY_="\e[0;33m"; cZ="\e[0m"; export cR cG cB cY cW cR_ cG_ cB_ cY_ cW_ cZ; }
CC_TO_USE=${CROSS_COMPILE}gcc
ORIG_CC="$CC_TO_USE"
for tool in rm rmdir dirname readlink file tempfile grep cut tee git date make "${CC_TO_USE}" wget tar sha256sum autoconf autoheader; do type $tool > /dev/null 2>&1 || { echo -e "${cR}ERROR:${cZ} couldn't find '$tool' which is required by this script."; exit 1; }; done
pushd $(dirname $0) > /dev/null; CURRABSPATH=$(readlink -nf "$(pwd)"); popd > /dev/null; # Get the directory in which the script resides
( [[ -n "$DEBUG" ]] || [[ -n "$DBG" ]] ) && { DBG=1; DEBUG=1; DBGCONFIGURE="$SHELL -x "; set -x; }
LOCKFILE="${TMPDIR=/tmp}/${CURRABSPATH//\//_}${0##*/}.lock"
MEANDMYSELF=${0##*/}
ZLIBURL="http://zlib.net/zlib-1.2.11.tar.gz"
ZLIBSHA256="c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1"
DROPBEAR_RELEASE="DROPBEAR_2019.78"
DROPBEAR_GITREPO="https://github.com/mkj/dropbear.git"
INSTALL_TO=${INSTALL_TO:-$HOME/bin/dropbear}
BASEDIR="${BASEDIR:-$(pwd)}"
CACHEDIR="$BASEDIR/cache"

function show_help
{
	echo -e "Syntax: $MEANDMYSELF [-h|-?] [-i <install-dir>] [-v] [-V <dropbear-release-tag>]"
	echo -e "\t${cW}-h | -?${cZ}"
	echo -e "\t  Show this help"
	echo -e "\t${cW}-i${cZ} <install-dir>"
	echo -e "\t  Set the installation directory. Can also be done by setting ${cW}INSTALL_TO${cZ}."
	echo -e "\t${cW}-v${cZ}"
	echo -e "\t  Be verbose about the actions (lines get leading '${cB}[DBG]${cZ}' string)."
	echo -e "\t${cW}-V${cZ} <dropbear-release-tag> ${cY}(if not given defaults to: $DROPBEAR_RELEASE)${cZ}"
	echo -e "\t  Tag to build instead of hardcoded default."
	echo ""
}

function prepare_src
{
	local PRJNAME=${1%%:*}
	local GITCLONE=${1#*:}
	local GITREF=$2
	local PRJ=$(echo "${PRJNAME##*/}"|tr 'a-z' 'A-Z')
	if ((NOCHECKOUT==0)); then
		[[ -d "$CACHEDIR" ]] || mkdir -p "$CACHEDIR"
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Working on project $PRJNAME ($GITCLONE), branch/tag = $GITREF."
		# Clone the repository if we don't have it
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Cloning repository if no clone exists."
		[[ -d "$CACHEDIR/$PRJNAME" ]] || $GITCLONE "$CACHEDIR/$PRJNAME"
		# Sanity check the clone
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Verifying the clone exists now."
		[[ -d "$CACHEDIR/$PRJNAME/.git" ]] || { echo -e "${cR}ERROR:${cZ} apparently we failed to clone $PRJNAME ($GITCLONE)."; exit 1; }
		# Set the Git stuff according to the docs
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Setting branch.master.rebase to true."
		( cd "$CACHEDIR/$PRJNAME" && git config branch.master.rebase true ) || { echo -e "${cR}ERROR:${cZ} could not set 'git config branch.master.rebase true' for $PRJNAME."; exit 1; }
		( cd "$CACHEDIR/$PRJNAME" && echo -en "${cW}$PRJ:${cZ} branch.master.rebase = " && git config --get branch.master.rebase )
		( cd "$CACHEDIR/$PRJNAME" && if [[ "xtrue" == "x$(git config --get core.bare)" ]]; then git config --bool core.bare false; fi ) || { echo -e "${cR}ERROR:${cZ} could not set 'git config --bool core.bare false' for $PRJNAME."; exit 1; }
		((REVIVEPKG)) && ( cd "$CACHEDIR/$PRJNAME" && echo -ne "\tHard-resetting ($(git config --get core.bare)) after thawing it.\n\t-> "; git reset --hard )
		# Scrub the working copy
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Cleaning extraneous files from Git clone."
		( cd "$CACHEDIR/$PRJNAME" && git clean -d -f ) || { echo -e "${cR}ERROR:${cZ} failed to 'git clean' $PRJNAME."; exit 1; }
		# Get latest changes to the Git repo
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Fetching updates from upstream."
		( cd "$CACHEDIR/$PRJNAME" && git fetch ) || { echo -e "${cY}WARNING:${cZ} failed to 'git fetch' $PRJNAME."; }
		# Check out the release
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Checking out the files on current branch."
		( cd "$CACHEDIR/$PRJNAME" && echo -en "${cW}$PRJ:${cZ} " && git checkout $GITREF ) || { echo -e "${cR}ERROR:${cZ} failed to check out $GITREF for $PRJNAME."; exit 1; }
		if git --git-dir="$CACHEDIR/$PRJNAME/.git" rev-parse --symbolic --branches|grep -q "$GITREF"; then
			((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Fast-forwarding, if possible."
			( cd "$CACHEDIR/$PRJNAME" && echo -en "${cW}$PRJ:${cZ} " && git merge --ff-only origin/$GITREF ) || { echo -e "${cR}ERROR:${cZ} failed to fast-forward to origin/$GITREF for $PRJNAME."; exit 1; }
		fi
		((GARBAGECOLLECT)) && ( echo "Now garbage-collecting the repository${GCAGGRESSIVE:+ ($GCAGGRESSIVE)}"; cd "$CACHEDIR/$PRJNAME" && git gc $GCAGGRESSIVE --prune=all)
	fi
	((ONLYCHECKOUT)) && return
}

function show_time_diff
{
	local START=$1
	local END=$2
	local MSG=$3
	[[ -n "$MSG" ]] || MSG="Runtime: %s"
	local DIFF=$((END-START))
	local DIFF_MIN=$((DIFF/60))
	local DIFF_SEC=$((DIFF%60))
	printf "$MSG\n" $(printf "%d:%02d" "$DIFF_MIN" "$DIFF_SEC")
}

[[ "$1" == "--help" ]] && { show_help; exit 0; }
while getopts "h?i:vV:" opt; do
	case "$opt" in
	h|\?)
		show_help
		exit 0
		;;
	i)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		INSTALL_TO="$OPTARG"
		;;
	v)  VERBOSE=1
		((VERBOSE)) && echo -e "${cB}[DBG]${cZ} Enabling verbose run."
		;;
	V)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		DROPBEAR_RELEASE="$OPTARG"
		;;
	*)
		echo -e "${cY}WARNING:${cZ} unknown option '$opt'"
		;;
	esac
done
if ! (set -o noclobber; echo "$$" > "$LOCKFILE") 2> /dev/null; then
	echo -e "${cR}ERROR:${cZ} Lock failed, PID $(cat "$LOCKFILE") [$LOCKFILE]" >&2
	exit 1
fi
trap 'rm -f "$LOCKFILE"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
echo -e "Working directory: $BASEDIR"
let PM=$(grep -c processor /proc/cpuinfo)
((VERBOSE)) && echo -e "${cB}[DBG]${cZ} Number of parallel jobs, based on processor count: $PM."
let TIME_START=$(date +%s)
PRJNAME="dropbear"
PRJSRCDIR="$CACHEDIR/$PRJNAME"
BUILDDIR="${PRJSRCDIR}.build"
((VERBOSE)) && echo -e "${cB}[DBG]${cZ} Preparing $PRJNAME"
prepare_src "$PRJNAME:git clone $DROPBEAR_GITREPO" "$DROPBEAR_RELEASE"

# Build musl-libc if not yet available
MUSLGCC="musl-${ORIG_CC##*/}"
MUSL_INSTALLDIR="$CACHEDIR/$MUSLGCC"
if [[ -x "$MUSL_INSTALLDIR/$MUSLGCC" ]]; then
	echo -e "${cW}INFO:${cZ} Skipping build of musl-libc (found cached copy at $MUSL_INSTALLDIR)."
else
	BUILDMUSL="$CURRABSPATH/build-musl"
	( echo -e "${cW}Building ${MUSLGCC##*/} now${cZ}"; cd "${BUILDMUSL%/*}" && ./${BUILDMUSL##*/} -i "$MUSL_INSTALLDIR" ) || { echo -e "${cR}ERROR:${cZ} failed to build musl-libc for ${ORIG_CC}."; exit 1; }
fi
export PATH="$MUSL_INSTALLDIR:$PATH"
SRCTARBALLDIR="$CACHEDIR/source-tarballs"
[[ -d "$SRCTARBALLDIR" ]] || mkdir -p "$SRCTARBALLDIR"
ZLIBPKG="$SRCTARBALLDIR/${ZLIBURL##*/}"
if [[ -f "$ZLIBPKG" ]]; then
	echo -e "${cW}${ZLIBURL##*/} already downloaded, using cached copy${cZ}"
else
	wget -nc -O "$ZLIBPKG" "$ZLIBURL" || curl -o "$ZLIBPKG" "$ZLIBURL" || { echo -e "${cR}ERROR:${cZ} failed to download $ZLIBURL"; exit 1; }
fi
echo "$ZLIBSHA256  $ZLIBPKG"|sha256sum -c ||  { echo -e "${cR}ERROR:${cZ} SHA-2 (256-bit) hash does not match!"; exit 1; }
trap 'rm -f "$LOCKFILE"; echo -e "'"${cW}INFO:${cZ}"' Removing the build directories due to signal."; rm -rf "'$BUILDDIR'"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
( rm -rf "$BUILDDIR"; mkdir -p "$BUILDDIR/zlib" )
if echo -n "... unpacking zlib" && tar --strip-components=1 -C "$BUILDDIR/zlib" -xf "$ZLIBPKG" && mkdir -p "$BUILDDIR/zlib/tempinstall"; then
	echo -e " ${cG}[OK]${cZ}"
else
	echo -e " ${cR}[failed]${cZ}"
	exit 1
fi
# Configure GCC for our purpose
export CC="$MUSLGCC"
export LDFLAGS="-Wl,--gc-sections -Wl,--hash-style=both"
export CFLAGS="-ffunction-sections -fdata-sections" # -fnostack-protector
# proceed ...
echo -e "Configuring and building ${cW}zlib${cZ}"
(
	cd "$BUILDDIR/zlib" && \
		$DBGCONFIGURE./configure --static "--prefix=$BUILDDIR/zlib/tempinstall" && \
		make --no-print-directory -C "$BUILDDIR/zlib" -j $PM && \
		make --no-print-directory -C "$BUILDDIR/zlib" install
) || { echo -e "${cR}ERROR:${cZ} zlib failed to build."; exit 1; }
((VERBOSE)) && echo -e "${cB}[DBG:$PRJNAME]${cZ} Cleaning extraneous files from Git clone."
( cd "$PRJSRCDIR" && git clean -d -f ) || { echo -e "${cR}ERROR:${cZ} failed to 'git clean' $PRJNAME."; exit 1; }
( cd "$PRJSRCDIR" && git reset --hard ) || { echo -e "${cR}ERROR:${cZ} failed to 'git reset --hard' $PRJNAME."; exit 1; }
echo -e "Configuring and building ${cW}$PRJ${cZ}"
(
	cd "$PRJSRCDIR" && \
		autoconf && autoheader && \
	cd "$BUILDDIR" && \
		mkdir $BUILDDIR/linux && \
		touch "$BUILDDIR/linux/types.h" && \
		grep -E '(__LINUX_PKT_SCHED_H|#define TC_PRIO_)' /usr/include/linux/pkt_sched.h > $BUILDDIR/linux/pkt_sched.h && \
			echo '#endif' >> "$BUILDDIR/linux/pkt_sched.h" && \
		$DBGCONFIGURE $PRJSRCDIR/configure \
			"--with-zlib=$BUILDDIR/zlib/tempinstall" \
			--disable-syslog \
			--disable-lastlog \
			--without-pam \
			--enable-bundled-libtom \
			--host=$(uname -m)-linux
			CPPFLAGS="-isystem '$BUILDDIR/zlib/tempinstall/include' -isystem '$PRJSRCDIR/libtommath' -I '$BUILDDIR'" \
			&& \
		make --no-print-directory -C "$BUILDDIR" -j $PM \
			PROGRAMS="dropbear dbclient scp dropbearkey dropbearconvert" \
			MULTI=1 \
			STATIC=1 \
			SCPPROGRESS=1 \
			all strip \
			&& \
		TARFILE="$CURRABSPATH/dropbear-v${DROPBEAR_RELEASE##*_}-static.tgz" && \
		trap 'rm -f "$LOCKFILE" "$TARFILE"; echo -e "'"${cW}INFO:${cZ}"' Removing the build directories due to signal."; rm -rf "'$BUILDDIR'"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
		tar -czvf "$TARFILE" $(find -maxdepth 1 -type l) dropbearmulti && \
		trap 'rm -f "$LOCKFILE"; echo -e "'"${cW}INFO:${cZ}"' Removing the build directories due to signal."; rm -rf "'$BUILDDIR'"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
) || { echo -e "${cR}ERROR:${cZ} $PRJ failed to build."; exit 1; }
# Cleanup took place by the traps in the subshell already by this time, so simply remove the traps in the parent shell
trap - INT TERM EXIT
let TIME_END=$(date +%s)
show_time_diff $TIME_START $TIME_END      "Overall runtime:     %s (m:ss) with $PM parallel job(s)"
exit 0
