#!/usr/bin/env bash
# vim: set autoindent smartindent ts=4 sw=4 sts=4 noet filetype=sh:
[[ -t 1 ]] && { cG="\e[1;32m"; cR="\e[1;31m"; cB="\e[1;34m"; cW="\e[1;37m"; cY="\e[1;33m"; cG_="\e[0;32m"; cR_="\e[0;31m"; cB_="\e[0;34m"; cW_="\e[0;37m"; cY_="\e[0;33m"; cZ="\e[0m"; export cR cG cB cY cW cR_ cG_ cB_ cY_ cW_ cZ; }
CC_TO_USE=${CROSS_COMPILE}${CC:-gcc}
ORIG_CC="$CC_TO_USE"
TOOLS_NEEDED="touch rm rmdir dirname readlink file tempfile grep tee tr git date make ${CC_TO_USE} gpg sed tar wc"
for tool in $TOOLS_NEEDED; do type $tool > /dev/null 2>&1 || { echo -e "${cR}ERROR:${cZ} couldn't find '$tool' which is required by this script."; exit 1; }; done
pushd $(dirname $0) > /dev/null; CURRABSPATH=$(readlink -nf "$(pwd)"); popd > /dev/null; # Get the directory in which the script resides
( [[ -n "$DEBUG" ]] || [[ -n "$DBG" ]] ) && { DBG=1; DEBUG=1; DBGCONFIGURE="$SHELL -x "; set -x; }
CROSS_COMPILE_PATH=${CROSS_COMPILE%/*}
CROSS_COMPILE=${CROSS_COMPILE##*/}
if [[ -n "$CROSS_COMPILE_PATH" ]]; then
	export PATH="$CROSS_COMPILE_PATH:$PATH"
fi
LOCKFILE="${TMPDIR=/tmp}/${CURRABSPATH//\//_}${0##*/}.lock"
MEANDMYSELF=${0##*/}
VERSION="${MUSLLIBC_VERSION:-1.2.2}"
RELEASE_TAG="${MUSLLIBC_RELEASE:-v$VERSION}"
GITREPO="${MUSLLIBC_GITREPO:-git://git.musl-libc.org/musl}"
# Possible alternatives: https://repo.or.cz/musl.git git://repo.or.cz/musl.git
PRJNAME="${PRJNAME:-musl}"
TAR_TAG="${TAR_TAG:-$PRJNAME}"
INSTALL_TO=${INSTALL_TO:-$HOME/bin/$TAR_TAG${CROSS_COMPILE:+.${CROSS_COMPILE%-}}}
BASEDIR="${BASEDIR:-$(pwd)}"
CMDLINE_OPTIONS="h?cCgGi:pr:vV:t:"
[[ -f "$BASEDIR/.cacherc" ]] && . .cacherc
CACHEDIR="${CACHEDIR:-$BASEDIR/${CACHEBASENAME:-cache}}"

function show_help
{
	local RELEASE_TAG="$1"
	echo -e "Syntax: $MEANDMYSELF [-h|-?] [-C|-c|-p] [-r <version>] [-g|-G] [-i <install-dir>] [-t <target-triplet>] [-v] [-V <release-tag>] [-x]"
	echo -e "\t${cW}-h | -?${cZ}"
	echo -e "\t  Show this help"
	echo -e "\t${cW}-c${cZ}"
	echo -e "\t  Only check out updates from upstream, then exit."
	echo -e "\t${cW}-C${cZ}"
	echo -e "\t  Do not check out from the upstream repository."
	echo -e "\t${cW}-g${cZ}"
	echo -e "\t  Garbage collect after checkout."
	echo -e "\t${cW}-G${cZ}"
	echo -e "\t  Garbage collect aggressively (${cW}git gc --aggressive${cZ}) after checkout."
	echo -e "\t${cW}-i${cZ} <install-dir>"
	echo -e "\t  Set the installation directory. Can also be done by setting ${cW}INSTALL_TO${cZ}."
	echo -e "\t${cW}-p${cZ}"
	echo -e "\t  Same as ${cW}-c${cZ} but also packages the Git repos in a .tar file after bundling them."
	echo -e "\t  ${cY}NB:${cZ} requires ${cW}git tar xz${cZ}."
	echo -e "\t${cW}-r${cZ} <moniker>"
	echo -e "\t  Revives the repositories previously packaged with ${cW}-p${cZ}. Implies ${cW}-c${cZ}."
	echo -e "\t  The moniker is typically a timestamp, e.g. packaged-${cW}\$TIMESTAMP${cZ}.tar."
	echo -e "\t  ${cW}NB:${cZ} to be called from the directory which contains ${MEANDMYSELF}."
	echo -e "\t  ${cY}NB:${cZ} requires a working ${cW}git${cZ}."
	echo -e "\t${cW}-v${cZ}"
	echo -e "\t  Be verbose about the actions (lines get leading '${cB}[DBG]${cZ}' string)."
	echo -e "\t${cW}-V${cZ} <release-tag> ${cY}(if not given defaults to: $RELEASE_TAG)${cZ}"
	echo -e "\t  Tag to build instead of hardcoded default."
	echo -e "\t${cW}-t${cZ} <target-triplet>"
	echo -e "\t  Target triplet, e.g. ${cW}x86_64-linux-gnu${cZ} or ${cW}i386-linux-gnu${cZ} or a"
	echo -e "\t  comma-separated list of architectures (default is to build both)."
	echo -e "\t  ${cW}NOTE:${cZ} this can be useful on x86_64 to force only to build x86_64 or x86_32 instead of"
	echo -e "\t  both."
	echo ""
	echo ""
	echo -e "By setting environment variable ${cW}CROSS_COMPILE${cZ} you can point this"
	echo -e "script to an alternative toolchain. Please use it with an absolute path."
	echo ""
	echo -e "Suppose you have ${cW}arm-none-linux-gnueabi-${cY}gcc${cZ} inside /opt/arm/bin"
	echo -e "you should invoke this script approximately as follows:"
	echo ""
	echo -e "  env ${cW}CROSS_COMPILE${cZ}=${cG}/opt/arm/bin/${cW}arm-none-linux-gnueabi-${cZ} $MEANDMYSELF ..."
	echo ""

}

function prepare_src
{
	local PRJNAME=${1%%:*}
	local GITCLONE=${1#*:}
	local GITREF=$2
	local GITBASEDIR=${3:-$BASEDIR}
	local PRJ=$(echo "${PRJNAME##*/}"|tr 'a-z' 'A-Z')
	if ((NOCHECKOUT==0)); then
		[[ -d "$GITBASEDIR" ]] || mkdir -p "$GITBASEDIR"
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Working on project $PRJNAME ($GITCLONE), branch/tag = $GITREF."
		if ((REVIVEPKG)); then
			((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Cloning Git bundle if no clone exists."
			if [[ ! -d "$GITBASEDIR/$PRJNAME" ]]; then
				( set -x; git clone ${PRJNAME##*/}-${REVIVETS}.gitbundle "$GITBASEDIR/$PRJNAME" )
				( set -x; git -C "$GITBASEDIR/$PRJNAME" remote set-url origin "${GITCLONE#git clone }" )
				( set -x; git -C "$GITBASEDIR/$PRJNAME" fetch --tags )
			fi
		else
		# Clone the repository if we don't have it
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Cloning repository if no clone exists."
			[[ -d "$GITBASEDIR/$PRJNAME" ]] || $GITCLONE "$GITBASEDIR/$PRJNAME"
		fi
		# Sanity check the clone
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Verifying the clone exists now."
		[[ -d "$GITBASEDIR/$PRJNAME/.git" ]] || { echo -e "${cR}ERROR:${cZ} apparently we failed to clone $PRJNAME ($GITCLONE)."; exit 1; }
		# Set the Git stuff according to the docs
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Setting branch.master.rebase to true."
		( cd "$GITBASEDIR/$PRJNAME" && git config branch.master.rebase true ) || { echo -e "${cR}ERROR:${cZ} could not set 'git config branch.master.rebase true' for $PRJNAME."; exit 1; }
		( cd "$GITBASEDIR/$PRJNAME" && echo -en "${cW}$PRJ:${cZ} branch.master.rebase = " && git config --get branch.master.rebase )
		( cd "$GITBASEDIR/$PRJNAME" && if [[ "xtrue" == "x$(git config --get core.bare)" ]]; then git config --bool core.bare false; fi ) || { echo -e "${cR}ERROR:${cZ} could not set 'git config --bool core.bare false' for $PRJNAME."; exit 1; }
		((REVIVEPKG)) && ( cd "$GITBASEDIR/$PRJNAME" && echo -ne "\tHard-resetting ($(git config --get core.bare)) after thawing it.\n\t-> "; git reset --hard )
		# Scrub the working copy
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Cleaning extraneous files from Git clone."
		( cd "$GITBASEDIR/$PRJNAME" && git clean -dfx) || { echo -e "${cR}ERROR:${cZ} failed to 'git clean -dfx' $PRJNAME."; exit 1; }
		# Get latest changes to the Git repo
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Fetching updates from upstream."
		( cd "$GITBASEDIR/$PRJNAME" && ( git fetch && git fetch --tags ) ) || { echo -e "${cY}WARNING:${cZ} failed to 'git fetch' $PRJNAME."; }
		# Prune branches
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Pruning remote branches."
		( cd "$GITBASEDIR/$PRJNAME" && git remote prune origin ) || { echo -e "${cY}WARNING:${cZ} failed to 'git remote prune origin' $PRJNAME."; }
		# Check out the release
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Checking out the files on current branch."
		( cd "$GITBASEDIR/$PRJNAME" && echo -en "${cW}$PRJ:${cZ} " && git checkout -f $GITREF ) || { echo -e "${cR}ERROR:${cZ} failed to check out $GITREF for $PRJNAME."; exit 1; }
		if git --git-dir="$GITBASEDIR/$PRJNAME/.git" rev-parse --symbolic --branches|grep -q "$GITREF"; then
			((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Fast-forwarding, if possible."
			( cd "$GITBASEDIR/$PRJNAME" && echo -en "${cW}$PRJ:${cZ} " && git merge --ff-only origin/$GITREF ) || { echo -e "${cR}ERROR:${cZ} failed to fast-forward to origin/$GITREF for $PRJNAME."; exit 1; }
		fi
		((GARBAGECOLLECT)) && ( echo "Now garbage-collecting the repository${GCAGGRESSIVE:+ ($GCAGGRESSIVE)}"; cd "$GITBASEDIR/$PRJNAME" && git gc $GCAGGRESSIVE --prune=all)
	fi
	((ONLYCHECKOUT)) && return
	[[ -d "$GITBASEDIR/build/$PRJNAME" ]] && rm -rf "$GITBASEDIR/build/$PRJNAME"
	mkdir -p "$GITBASEDIR/build/$PRJNAME" || { echo -e "${cR}ERROR:${cZ} could not create build/$PRJNAME directory."; exit 1; }
}

function show_time_diff
{
	local START=$1
	local END=$2
	local MSG=$3
	[[ -n "$MSG" ]] || MSG="Runtime: %s"
	local DIFF=$((END-START))
	local DIFF_MIN=$((DIFF/60))
	local DIFF_SEC=$((DIFF%60))
	printf "$MSG\n" $(printf "%d:%02d" "$DIFF_MIN" "$DIFF_SEC")
}

function assert_tools
{
	local opt=${1:-this script}
	shift
	for tool in "$@"; do
		if ! type $tool > /dev/null 2>&1; then
			echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires ${cW}$tool${cZ} which was not found!"
			exit 1
		fi
	done
}

function freeze_repo
{
	local BASEDIR="$1"
	local TARGETDIR="$2"
	local HASHPROG="$3"
	shift 3
	echo -e "${cW}freeze_repo(${cY}'$BASEDIR', '$TARGETDIR', '$HASHPROG', ${cG}" "$@" "${cW})${cZ}"
	local TIMESTAMP=${TIMESTAMP:-$(date +%Y-%m-%dT%H-%M-%S)}
	local TARNAME="packaged-${TIMESTAMP}-${TAR_TAG}.tar"
	local UNPACKER="unpack-$TIMESTAMP-${TAR_TAG}"
	echo "Packaging the source into $TARNAME"
	(
		trap '( set -x; rm -f "'$BASEDIR/$reponame-$TIMESTAMP.gitbundle'"{,.'${HASHPROG^^}'} "'$BASEDIR/${HASHPROG^^}S'" ); trap - INT TERM EXIT; exit $?' INT TERM EXIT
		cd "$BASEDIR"
		echo "Now bundling repositories"
		find "$@" -type d -name '.git'|while read dname; do
			reponame=${dname%/.git}
			reponame=${reponame##*/}
			( set -x; git -C "$dname" bundle create "$BASEDIR/$reponame-$TIMESTAMP.gitbundle" --all )
			( cd "$BASEDIR"; set -x; $HASHPROG "$reponame-$TIMESTAMP.gitbundle"|tee "$reponame-$TIMESTAMP.gitbundle.${HASHPROG^^}")
		done
		echo "Now packing the contents with tar"
		if [[ "$CURRABSPATH/$MEANDMYSELF" != "$BASEDIR/$MEANDMYSELF" ]]; then
			cp -f "$CURRABSPATH/$MEANDMYSELF" "$BASEDIR/$MEANDMYSELF" || true
		fi
		( cd "$BASEDIR"; ( cat *-$TIMESTAMP.gitbundle.${HASHPROG^^}; $HASHPROG $MEANDMYSELF ) | tee ${HASHPROG^^}S )
		echo -n "" > "$BASEDIR/$MEANDMYSELF.extrafiles"
		for fname in "$@"; do
			if [[ -f "$BASEDIR/$fname" ]]; then
				( \
					cd "$BASEDIR"; \
					pname="${CACHEDIR##*/}/${fname}"; \
					test -d "${pname%/*}" || mkdir -p "${pname%/*}"; \
					cp -a "$fname" "${pname%/*}"/ ; \
					$HASHPROG "$pname" | tee -a ${HASHPROG^^}S; \
					echo "$pname" | tee -a "./$MEANDMYSELF.extrafiles" \
				)
			elif [[ -f "$fname" ]]; then
				( \
					bname="${fname##*/}"; \
					cd "$BASEDIR" && \
					cp -na "$fname" .; \
					$HASHPROG "$bname" | tee -a ${HASHPROG^^}S; \
					echo "$bname" | tee -a "./$MEANDMYSELF.extrafiles" \
				)
			fi
		done
		( set -x; tar -C "$BASEDIR" -chvf "$TARGETDIR/$TARNAME" $MEANDMYSELF *-$TIMESTAMP.gitbundle{,.${HASHPROG^^}} ${HASHPROG^^}S $(cat $MEANDMYSELF.extrafiles) ) && \
			echo "Find the package under the name $TARNAME"
		if [[ "$CURRABSPATH/$MEANDMYSELF" != "$BASEDIR/$MEANDMYSELF" ]]; then
			rm -f "$BASEDIR/$MEANDMYSELF"
		fi
		cat - >> "$TARGETDIR/$UNPACKER" <<-EOF
			#!/usr/bin/env bash
			TS="\${TS:-$TIMESTAMP}"
			T="${TARNAME//$TIMESTAMP/\$TS}"
			D="\${TGTDIR:-\$TS-${TAR_TAG}}"
			R="./$MEANDMYSELF"
			U="${UNPACKER//$TIMESTAMP/\$TS}"
			echo "Unpacking \$T into ./\$D \$( [[ "x\$1" == "x-c" ]] && echo "and removing archive plus unpacker upon success" )"
			test -d "./\$D" || mkdir -p "./\$D" || { echo -e "ERROR: failed to create target directory (\$D)"; exit 1; }
			tar -C "./\$D" -xf "./\$T" || { echo -e "ERROR: failed to unpack tarball (\$T)"; exit 1; }
			( cd "./\$D"; $HASHPROG -c ${HASHPROG^^}S || exit \$?; ) || { echo -e "ERROR: failed to validate hashes in target directory (\$D)"; exit 1; }
			if [[ -x "./\$D/\$R" ]]; then
				( set -x; cd "\$D"; \$R -r "\$TS" ) || { echo -e "ERROR: failed to revive build package (\$D)"; exit 1; }
			fi
			if [[ "x\$1" == "x-c" ]]; then
				echo "Also removing \$U and \$T"
				rm -f "./\$U" "./\$T"
			fi
		EOF
		chmod +x "$TARGETDIR/$UNPACKER"
		rm -f "$BASEDIR"/*-$TIMESTAMP.gitbundle{,.${HASHPROG^^}} "$BASEDIR"/${HASHPROG^^}S "$BASEDIR/$MEANDMYSELF.extrafiles"
		trap - INT TERM EXIT
	)
}

[[ "$1" == "--help" ]] && { show_help "$RELEASE_TAG"; exit 0; }
while getopts "$CMDLINE_OPTIONS" opt; do
	case "$opt" in
	h|\?)
		show_help "$RELEASE_TAG"
		exit 0
		;;
	c)  ((NOCHECKOUT)) && { echo -e "${cR}ERROR:${cZ} ${cY}-C${cZ} and ${cY}-c${cZ}/${cY}-p${cZ} are mutually exclusive."; exit 1; }
		ONLYCHECKOUT=1
		assert_tools "$opt" git
		echo "Doing only a checkout"
		;;
	C)  ((ONLYCHECKOUT)) && { echo -e "${cR}ERROR:${cZ} ${cY}-C${cZ} and ${cY}-c${cZ}/${cY}-p${cZ} are mutually exclusive."; exit 1; }
		NOCHECKOUT=1
		echo -e "${cY}Skipping checkout${cZ}"
		;;
	g)  GARBAGECOLLECT=1
		;;
	G)  GARBAGECOLLECT=1
		GCAGGRESSIVE="--aggressive"
		;;
	i)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		INSTALL_TO="$OPTARG"
		;;
	p)  ((NOCHECKOUT)) && { echo -e "${cR}ERROR:${cZ} ${cY}-C${cZ} and ${cY}-p${cZ}/${cY}-c${cZ} are mutually exclusive."; exit 1; }
		ONLYCHECKOUT=1
		BUNDLEGIT=1
		assert_tools "$opt" cp sha256sum tar tee xz
		echo "Doing only a checkout and then packaging bundled clones into a .tar file."
		;;
	r)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		((NOCHECKOUT)) || ONLYCHECKOUT=1
		REVIVEPKG=1
		REVIVETS="$OPTARG"
		assert_tools "$opt" git
		echo "Reviving Git bundles, followed a checkout."
		;;
	t)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		TARGETARCH="$OPTARG"
		let TARGETGIVEN=1
		;;
	v)  VERBOSE=1
		((VERBOSE)) && echo -e "${cB}[DBG]${cZ} Enabling verbose run."
		;;
	V)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		RELEASE_TAG="$OPTARG"
		;;
	*)
		echo -e "${cY}WARNING:${cZ} unknown option '$opt'"
		;;
	esac
done
if ! (set -o noclobber; echo "$$" > "$LOCKFILE") 2> /dev/null; then
	echo -e "${cR}ERROR:${cZ} Lock failed, PID $(cat "$LOCKFILE") [$LOCKFILE]" >&2
	exit 1
fi
if [[ "$CC_TO_USE" != "$ORIG_CC" ]]; then
	echo -e "${cW}INFO:${cZ} cross-compilation was requested: CROSS_COMPILE=$CROSS_COMPILE"
fi
trap 'rm -f "$LOCKFILE"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
echo -e "\tWorking directory: $BASEDIR"
let PM=$(grep -c processor /proc/cpuinfo || echo 2)
((VERBOSE)) && echo -e "${cB}[DBG]${cZ} Number of parallel jobs, based on processor count: $PM."
let TIME_START=$(date +%s)
PRJSRCDIR="$CACHEDIR/$PRJNAME"
BUILDDIR="${PRJSRCDIR}.build"
for i in "$PRJNAME:git clone $GITREPO"; do
	prepare_src "$i" "$RELEASE_TAG" "$CACHEDIR"
done
let TIME_GIT=$(date +%s)
if ((ONLYCHECKOUT==0)); then
	BUILD_MACH=$("${CC_TO_USE}" -dumpmachine 2> /dev/null)
	DEF_ARCH=$("${CC_TO_USE}" -print-multiarch 2> /dev/null || echo "$BUILD_MACH")
	M32_ARCH=$("${CC_TO_USE}" -m32 -print-multiarch 2> /dev/null)
	M64_ARCH=$("${CC_TO_USE}" -m64 -print-multiarch 2> /dev/null)
	[[ -n "$TARGETARCH" ]] || TARGETARCH="$DEF_ARCH"
	TGTTRIPLET=$TARGETARCH
	TARGETDUPL=${TARGETARCH#*-}
	TARGETARCH=${TARGETARCH%%-*}
	CC_VERSION=$("${CC_TO_USE}" -dumpversion)
	((${CC_VERSION%%.*} >= 4)) || { echo -e "${cR}ERROR:${cZ} The compiler version is less than 4 (actual value: $CC_VERSION) and thus unsupported."; exit 1; }
	if [[ -z "$TARGETGIVEN" ]] && [[ "$TARGETARCH" == "x86_64" ]] && [[ "$DEF_ARCH" == "$M64_ARCH" ]]; then
		if "${CC_TO_USE}" -print-multi-lib 2> /dev/null|grep -q '^32;'; then
			echo -e "${cW}INFO:${cZ} Building 32-bit ${cW}and${cZ} 64-bit Intel/AMD musl-libc (IA-32)"
			TARGETARCH=$TARGETARCH,i386
			BITNESS_ELF_TYPE="%{!m32:-melf_x86_64}%{m32:-melf_i386}"
			let SPECIALSPEC=1
		fi
	fi
	type ${DEF_ARCH}-gcc > /dev/null 2>&1 && CROSS_COMPILE="${DEF_ARCH}-"
	echo -e "TARGETARCH=$TARGETARCH"

	if [[ -d "$INSTALL_TO" ]]; then
		OLD_INSTALL_TO="backup-${INSTALL_TO##*/}-$(date -r "$INSTALL_TO" +"%Y-%m-%dT%H-%M-%S")"
		echo -e "${cW}NOTE:${cZ} $INSTALL_TO exists, renaming it to $OLD_INSTALL_TO."
		mv "$INSTALL_TO" "${INSTALL_TO%/*}/$OLD_INSTALL_TO" || { echo -e "${cR}ERROR:${cZ} failed to move $INSTALL_TO out of the way."; exit 1; }
		trap 'rm -f "$LOCKFILE"; echo -e "'"${cW}INFO:${cZ}"' Moving back your previous musl-libc from '$OLD_INSTALL_TO' due to signal"; rm -rf "'$INSTALL_TO'"; mv "'${INSTALL_TO%/*}/$OLD_INSTALL_TO'" "'$INSTALL_TO'";  echo -e "'"${cW}INFO:${cZ}"' Removing the build directories due to signal."; rm -rf "'$BUILDDIR'" "'$BUILDDIR'32" "'$BUILDDIR'64"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
	else
		trap 'rm -f "$LOCKFILE"; echo -e "'"${cW}INFO:${cZ}"' Removing the build directories due to signal."; rm -rf "'$BUILDDIR'" "'$BUILDDIR'32" "'$BUILDDIR'64"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
	fi
	for tgt in ${TARGETARCH//,/ }; do
		echo -e "Now building for target ${cW}$tgt${cZ}"
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJNAME]${cZ} Cleaning extraneous files from Git clone."
		( cd "$PRJSRCDIR" && git clean -d -f ) || { echo -e "${cR}ERROR:${cZ} failed to 'git clean' $PRJNAME."; exit 1; }
		case "$tgt" in
		i?86|x86_32) # 32-bit Intel/AMD
			ARCHARG="-m32"
			( \
				PREFIX="$INSTALL_TO" ; \
				BITNESS="32" ; \
				BLDDIR="$BUILDDIR$BITNESS" ; \
				{ ((SPECIALSPEC)) && { DIRS="--bindir=$PREFIX/bin$BITNESS --libdir=$PREFIX/lib$BITNESS --includedir=$PREFIX/include$BITNESS"; rm -rf "$PREFIX/"{bin,lib,include}$BITNESS; true ; } || { rm -rf "$PREFIX/"{bin,lib,include}; true; } ; } ; \
				cd "$PRJSRCDIR" && \
				make --no-print-directory distclean && \
				( rm -rf "$BLDDIR"; mkdir -p "$BLDDIR"; true ) && \
				( cd "$BLDDIR"; set -x; env CROSS_COMPILE="$CROSS_COMPILE" CFLAGS="-m$BITNESS -Wl,-melf_i386" ${DBGCONFIGURE}$PRJSRCDIR/configure --srcdir="$PRJSRCDIR" --prefix="$PREFIX" $(echo "$DIRS ")--disable-shared --target="${tgt}-${TARGETDUPL}" ) && \
				make --no-print-directory -C "$BLDDIR" -j$PM && \
				make --no-print-directory -C "$BLDDIR" install && \
				sed -i -re '/^exec/ s|'"$PREFIX"'|\$(cd "\${0%/*}/.."; pwd)|' "$PREFIX/bin$BITNESS/musl-gcc" \
				)
			;;
		x86_64) # 64-bit Intel/AMD
			ARCHARG="-m64"
			( \
				PREFIX="$INSTALL_TO" ; \
				BITNESS="64" ; \
				BLDDIR="$BUILDDIR$BITNESS" ; \
				{ ((SPECIALSPEC)) && { DIRS="--bindir=$PREFIX/bin$BITNESS --libdir=$PREFIX/lib$BITNESS --includedir=$PREFIX/include$BITNESS"; rm -rf "$PREFIX/"{bin,lib,include}$BITNESS; true ; } || { rm -rf "$PREFIX/"{bin,lib,include}; true; } ; } ; \
				cd "$PRJSRCDIR" && \
				make distclean && \
				( rm -rf "$BLDDIR"; mkdir -p "$BLDDIR"; true ) && \
				( cd "$BLDDIR"; set -x; env CROSS_COMPILE="$CROSS_COMPILE" CFLAGS="-m$BITNESS -Wl,-melf_x86_64" ${DBGCONFIGURE}$PRJSRCDIR/configure --srcdir="$PRJSRCDIR" --prefix="$PREFIX" $(echo "$DIRS ")--disable-shared --target="${tgt}-${TARGETDUPL}" ) && \
				make --no-print-directory -C "$BLDDIR" -j$PM && \
				make --no-print-directory -C "$BLDDIR" install && \
				sed -i -re '/^exec/ s|'"$PREFIX"'|\$(cd "\${0%/*}/.."; pwd)|' "$PREFIX/bin$BITNESS/musl-gcc" \
				)
			;;
		*) # native
			( \
				BLDDIR="$BUILDDIR$BITNESS" ; \
				cd "$PRJSRCDIR" && \
				make --no-print-directory distclean && \
				( rm -rf "$BLDDIR"; mkdir -p "$BLDDIR"; true ) && \
				(cd "$BLDDIR"; set -x; ${DBGCONFIGURE}$PRJSRCDIR/configure --srcdir="$PRJSRCDIR" --prefix="$INSTALL_TO" --disable-shared ) && \
				make --no-print-directory -C "$BLDDIR" -j$PM && \
				make --no-print-directory -C "$BLDDIR" install && \
				sed -i -re '/^exec/ s|'"$INSTALL_TO"'|\$(cd "\${0%/*}/.."; pwd)|' "$PREFIX/bin/musl-gcc" \
				)
			;;
		esac
	done

	function test_musl_wrapper
	{
		local HELLOC=$(tempfile -p musl-test -s .c)
		local MUSLGCC="$1"
		shift
		echo -e "${cW}INFO:${cZ} Let's verify that the musl-gcc wrapper (${cW}$MUSLGCC${cZ}) script and .specs performs as expected"
		cat > "$HELLOC" <<-'EOF'
			#include <stdio.h>
			void main(void)
			{
				printf("Hello world!\n");
			}
		EOF
		for i in "$@"; do
			if [[ -z "$i" ]]; then
				( set -x; $MUSLGCC -static "$HELLOC" -o "${HELLOC%.c}" ) || { echo -e "${cR}ERROR:${cZ} failed the native build."; exit 1; }
			else
				( set -x; $MUSLGCC -static $i "$HELLOC" -o "${HELLOC%.c}" ) || { echo -e "${cR}ERROR:${cZ} failed the $i build (did you install the ${cW}lib32gcc-*-dev${cZ} (search with ${cW}apt-cache search lib32gcc-.-dev${cZ}) package or similar?)."; exit 1; }
			fi
			file "${HELLOC%.c}"
			rm -f "${HELLOC%.c}"
		done
		echo -e "${cG}musl-gcc (${cW}$MUSLGCC${cG}) works fine${cZ}"
	}

	MUSLGCC="$INSTALL_TO/musl-${ORIG_CC##*/}"
	echo -e "${cW}INFO:${cZ} Preparing spec file for ${cW}musl-gcc${cZ} (${cW}$MUSLGCC${cZ}) to build both 32-bit and 64-bit targets using ${cW}-m32${cZ} and ${cW}-m64${cZ} respectively"
	if [[ -n "$TARGETGIVEN" ]] && [[ -n "$ARCHARG" ]] && (($(wc -w <<< $TARGETGIVEN) == 1)); then
		ARCHARG=" $ARCHARG"
	else
		ARCHARG=""
	fi
	cat > "${MUSLGCC}.specs" <<-EOF
		%rename cpp_options old_cpp_options

		*local_prefix:
		$INSTALL_TO

		*path_lib32:
		%(local_prefix)/lib32

		*path_inc32:
		%(local_prefix)/include32

		*path_lib64:
		%(local_prefix)/lib64

		*path_inc64:
		%(local_prefix)/include64

		*cpp_options:
		-nostdinc -isystem %{m32:%(path_inc32)}%{!m32:%(path_inc64)} -isystem include%s %(old_cpp_options)

		*cc1:
		%(cc1_cpu) -nostdinc -isystem %{m32:%(path_inc32)}%{!m32:%(path_inc64)} -isystem include%s

		*link_libgcc:
		-L%{m32:%(path_lib32)}%{!m32:%(path_lib64)} -L .%s

		*libgcc:
		libgcc.a%s %:if-exists(libgcc_eh.a%s)

		*startfile:
		%{!shared: %{m32:%(path_lib32)}%{!m32:%(path_lib64)}/%{pie:S}crt1.o} %{m32:%(path_lib32)}%{!m32:%(path_lib64)}/crti.o %{shared|pie:crtbeginS.o%s;:crtbegin.o%s}

		*endfile:
		%{shared|pie:crtendS.o%s;:crtend.o%s} %{m32:%(path_lib32)}%{!m32:%(path_lib64)}/crtn.o

		*bitness_elf_type:
		$BITNESS_ELF_TYPE

		*link:
		-dynamic-linker /lib/ld-musl-%{m32:i386}%{!m32:x86_64}.so.1 -nostdlib %{shared:-shared} %{static:-static} %{rdynamic:-export-dynamic} %(bitness_elf_type)

		*esp_link:


		*esp_options:


		*esp_cpp_options:


	EOF
	[[ -f "${MUSLGCC}.specs" ]] || { echo -e "${cR}ERROR:${cZ} failed to write ${MUSLGCC}.specs file"; exit 1; }
	cat > "$MUSLGCC" <<-EOF
		#!/usr/bin/env bash
		RELEASE_TAG="$RELEASE_TAG"
		GITREPO="$GITREPO"
		GCCTORUN="\${REALGCC:-$ORIG_CC}"
		MUSL_TOPDIR="\$(cd "\${0%/*}"; pwd)"
		if "\$GCCTORUN" -v 2>&1|grep '^Configured with:'|grep -q -- '--enable-default-pie'; then
			PIEFLAG=${PIEFLAG:--pie}
		fi
		( [[ -n "\$DBG" ]] && set -x; env MUSL_TOPDIR="\$MUSL_TOPDIR" "\$GCCTORUN" \${PIEFLAG} "\$@" -specs "\${0}.specs" ) || exit \$?
	EOF
	[[ -f "$MUSLGCC" ]] || { echo -e "${cR}ERROR:${cZ} failed to write musl-gcc wrapper ((${cW}$MUSLGCC${cZ})) script"; exit 1; }
	chmod +x "$MUSLGCC" || { echo -e "${cR}ERROR:${cZ} failed to make musl-gcc (${cW}$MUSLGCC${cZ}) executable."; exit 1; }
	if ((SPECIALSPEC)); then
		DBG=1 test_musl_wrapper "$MUSLGCC" "" "-m32" "-m64"
	else
		for i in 32 64; do
			(cd "$INSTALL_TO" && ln -s include include$i)
			(cd "$INSTALL_TO" && ln -s lib lib$i)
		done
		DBG=1 test_musl_wrapper "$MUSLGCC" ""
	fi
	rm -f "$INSTALL_TO"/lib*/*.specs "$INSTALL_TO/bin/musl-gcc" && { test -d "$INSTALL_TO/bin" && rmdir "$INSTALL_TO/bin"; }

	trap 'rm -f "$LOCKFILE"; echo -e "'"${cW}INFO:${cZ}"' Removing the build directories due to signal."; rm -rf "'$BUILDDIR'" "'$BUILDDIR'32" "'$BUILDDIR'64"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
	echo -e "${cW}NOTE:${cZ} it is recommended to add $INSTALL_TO to your ${cW}PATH${cZ} variable and subsequently pass ${cW}CC=$MUSLGCC${cZ} to make."
	if [[ -n "$OLD_INSTALL_TO" ]]; then
		echo -e "Also remember that your previous musl-libc installation was moved to ${INSTALL_TO%/*}/${OLD_INSTALL_TO}. Remove it at your own discretion."
	fi
fi
if ((ONLYCHECKOUT==1)); then
	show_time_diff $TIME_START $TIME_GIT      "Git operations took: %s"
fi
if ((BUNDLEGIT==1)); then
	freeze_repo "$CACHEDIR" "$BASEDIR" sha256sum $PRJNAME
	let TIME_GITBUNDLE=$(date +%s)
	show_time_diff $TIME_GIT $TIME_GITBUNDLE                "Packaging took:      %s"
fi
let TIME_END=$(date +%s)
show_time_diff $TIME_START $TIME_END      "Overall runtime:     %s (m:ss) with $PM parallel job(s)"
exit 0
