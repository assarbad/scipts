#!/usr/bin/env bash
# Possible sources for interesting Rust-based stuff: https://lib.rs + crates.io + cli.rs
TARGET=${TARGET:-x86_64-unknown-linux-musl}
OPENSSL_REFNAME=${OPENSSL_REFNAME:-OpenSSL_1_1_1h}
OPENSSL_ARCH=${OPENSSL_ARCH:-x86}
[[ -t 1 ]] && { cG="\e[1;32m"; cR="\e[1;31m"; cB="\e[1;34m"; cW="\e[1;37m"; cY="\e[1;33m"; cG_="\e[0;32m"; cR_="\e[0;31m"; cB_="\e[0;34m"; cW_="\e[0;37m"; cY_="\e[0;33m"; cZ="\e[0m"; export cR cG cB cY cW cR_ cG_ cB_ cY_ cW_ cZ; }
for tool in cp date dirname mkdir readlink tee grep ldd rustup sha256sum sort strip tar xz cargo; do type $tool > /dev/null 2>&1 || { echo -e "${cR}ERROR:${cZ} couldn't find '$tool' which is required by this script."; exit 1; }; done
pushd $(dirname $0) > /dev/null; CURRABSPATH=$(readlink -nf "$(pwd)"); popd > /dev/null; # Get the directory in which the script resides
test -d "$CURRABSPATH/cache" || mkdir -p "$CURRABSPATH/cache"
TEMPDIR=${TEMPDIR:-"$(mktemp -dp "$CURRABSPATH/cache")"}
( [[ -n "$DEBUG" ]] || [[ -n "$DBG" ]] ) && { DBG=1; DEBUG=1; DBGCONFIGURE="$SHELL -x "; set -x; }
if ! rustup target list --installed|grep -q "$TARGET"; then
	echo -e "${cR}ERROR:${cZ} missing Rust target ${cW}${TARGET}${cZ}."
	echo -e "\nUse: ${cW}rustup target install ${TARGET}${cZ} to install"
	exit 1
fi
# These can be installed using 'cargo install' and statically linked against musl libc
SIMPLE_INSTALLS="\
@main:nat:willdoescode/nat
b3sum:BLAKE3-team/BLAKE3
bandwhich:imsnif/bandwhich
bat:sharkdp/bat
bingrep:m4b/bingrep
bottom:btm:ClementTsang/bottom
broot:canop/broot
ddh:darakian/ddh
diffr:mookid/diffr
dirstat-rs:dirstat:scullionw/dirstat-rs
diskonaut:imsnif/diskonaut
du-dust:dust:bootandy/dust
dupe-krill:kornelski/dupe-krill
dutree:nachoparker/dutree
eureka:simeg/eureka
exa:ogham/exa
fastmod:facebookincubator/fastmod
fd-find:fd:sharkdp/fd
fddf:lib.rs/crates/fddf
funzzy:cristianoliveira/funzzy
git-delta:delta:dandavison/delta
git-global:peap/git-global
git-project:kroger-technology/git-project
gitall:mattmahn/gitall.rs
gitout:jakewharton/gitout
gitui:extrawurst/gitui
grex:pemistahl/grex
hexyl:sharkdp/hexyl
hyperfine:sharkdp/hyperfine
jql:yamafaktory/jql
kmon:orhun/kmon
kondo:tbillington/kondo
licensor:raftario/licensor
lolcate-rs:lolcate:ngirard/lolcate-rs
lsd:Peltoche/lsd
mdcat:lunaryorn/mdcat
nomino:yaa110/nomino
oxipng:shssoichiro/oxipng
pastel:sharkdp/pastel
perftacho:qrider71/tacho
procs:dalance/procs
repo-cli:repo:edeneast/repo
repoch:lucawen/repoch
repofetch:spenserblack/repofetch
ripgrep:rg:BurntSushi/ripgrep
rnr:chuckdaniels87/rnr
romodoro:michaelfletchercgy/romodoro
rustscan:rustscan/rustscan
sccache:mozilla/sccache
scout:jhbabon/scout
sd:chmln/sd
skim:sk:lotabout/skim
starship:starship/starship
tealdeer:tldr:dbrgn/tealdeer
tokei:lib.rs/crates/tokei
treesum:anderejd/treesum
vcprompt:sscherfke/rust-vcprompt
verco:matheuslessarodrigues/verco
viu:atanunq/viu
vivid:sharkdp/vivid
watchexec:watchexec/watchexec
zoxide:lib.rs/crates/zoxide
zrs:fauxfaux/zrs
"

# Number of jobs
let PM=$(grep -c processor /proc/cpuinfo || echo 2)

function git_checkout
{
	local REPOURL="$1"
	local SUBDIR="$2"
	local GITREF="$3"
	local TEMPDIR="$4"
	local REPOID="${REPOURL#http*://}"
	REPOID="${REPOID%.git}"
	REPOID="${REPOID//\//_}"
	local GITBNDL="${SUBDIR//\//_}_$REPOID.gitbundle"
	test -d "$TEMPDIR/$SUBDIR" && rm -rf "$TEMPDIR/$SUBDIR"
	# Revive existing bundle
	if [[ -e "$TEMPDIR/../$GITBNDL" ]]; then
		( cd "$TEMPDIR/.."; set -x; sha256sum -c "$GITBNDL.SHA256SUM" ) || { echo -e "${cR}ERROR:${cZ} failed to verify $GITBNDL"; return 1; }
		( cd "$TEMPDIR"; set -x; git clone "../$GITBNDL" "$SUBDIR" ) || { echo -e "${cR}ERROR:${cZ} failed to clone $GITBNDL"; return 1; }
		( cd "$TEMPDIR"; set -x; git -C "$SUBDIR" remote set-url origin "$REPOURL" ) || { echo -e "${cR}ERROR:${cZ} failed setting URL of remote"; return 1; }
	else # ... or clone from upstream URL
		( cd "$TEMPDIR"; set -x; git clone --mirror "$REPOURL" "$SUBDIR/.git" ) || { echo -e "${cR}ERROR:${cZ} failed to clone $REPOURL"; return 1; }
	fi
	( cd "$TEMPDIR"; set -x; git -C "$SUBDIR" config --bool core.bare false ) || { echo -e "${cR}ERROR:${cZ} failed marking $SUBDIR non-bare"; return 1; }
	( cd "$TEMPDIR"; set -x; git -C "$SUBDIR" config --bool branch.master.rebase true ) || { echo -e "${cR}ERROR:${cZ} could not set 'git config branch.master.rebase true' for $SUBDIR."; return 1; }
	( cd "$TEMPDIR"; echo -en "branch.master.rebase = " && git -C "$SUBDIR" config --get branch.master.rebase )
	( cd "$TEMPDIR"; set -x; git -C "$SUBDIR" checkout --detach -f $GITREF ) || { echo -e "${cR}ERROR:${cZ} failed to check out $GITREF for $SUBDIR."; return 1; }
	( cd "$TEMPDIR"; set -x; git -C "$SUBDIR" clean -dfx) || { echo -e "${cR}ERROR:${cZ} failed to 'git clean -dfx' $SUBDIR."; return 1; }
	( cd "$TEMPDIR"; set -x; git -C "$SUBDIR" fetch --all; git -C "$SUBDIR" fetch --tags ) || { echo -e "${cY}WARNING:${cZ} failed to 'git fetch' $SUBDIR."; }
	( cd "$TEMPDIR"; set -x; git -C "$SUBDIR" remote prune origin ) || { echo -e "${cY}WARNING:${cZ} failed to 'git remote prune origin' $SUBDIR."; }
	# Bundle that stuff as a cached copy
	( cd "$TEMPDIR"; set -x; git -C "$SUBDIR" bundle create "../../$GITBNDL" --all ) || { echo -e "${cR}ERROR:${cZ} failed to cache $SUBDIR in a Git bundle."; return 1; }
	( cd "$TEMPDIR/.."; set -x; sha256sum "$GITBNDL"|tee "$GITBNDL.SHA256SUM" ) || { echo -e "${cR}ERROR:${cZ} failed to hash the $SUBDIR Git bundle."; return 1; }
	return 0
}

function openssl_build
{
	local OSSLSUBDIR=openssl
	local KRNLSUBDIR=kernel-headers
	git_checkout "https://github.com/openssl/openssl.git" "$OSSLSUBDIR" "$OPENSSL_REFNAME" "$TEMPDIR" || return $?
	git_checkout "https://github.com/sabotage-linux/kernel-headers.git" "$KRNLSUBDIR" master "$TEMPDIR" || return $?
	( cd "$TEMPDIR/openssl"; set -x; ln -s "$TEMPDIR/$KRNLSUBDIR" "$KRNLSUBDIR" ) || { echo -e "${cR}ERROR:${cZ} failed to symlink kernel headers into OpenSSL source directory"; return 1; }
	PREFIX="$TEMPDIR/openssl-dir"
	( set -x; test -d "$PREFIX" && { rm -rf "$PREFIX"; exit 1; } || true ) || { echo -e "${cR}ERROR:${cZ} failed to clean out the OpenSSL installation directory"; return 1; }
	( set -x; mkdir "$PREFIX" ) || { echo -e "${cR}ERROR:${cZ} failed to create OpenSSL installation directory"; return 1; }
	#type ccache > /dev/null 2>&1 && CC="ccache musl-gcc" || CC="musl-gcc"
	CC="musl-gcc"
	( cd "$TEMPDIR/openssl"; set -x; \
		env CC="$CC" CPPFLAGS="-Ikernel-headers/$OPENSSL_ARCH/include" bash -c "./config --prefix=$PREFIX no-engine no-shared no-threads no-ts && make -j $PM" \
	) || { echo -e "${cR}ERROR:${cZ} failed to install OpenSSL"; return 1; }
	( set -x; make -C "$TEMPDIR/openssl" install_sw ) || { echo -e "${cR}ERROR:${cZ} failed to install OpenSSL"; return 1; }
	return 0
}

function show_time_diff
{
	local START=$1
	local END=$2
	local MSG=$3
	[[ -n "$MSG" ]] || MSG="Runtime: %s"
	local DIFF=$((END-START))
	local DIFF_MIN=$((DIFF/60))
	local DIFF_SEC=$((DIFF%60))
	printf "$MSG\n" $(printf "%d:%02d" "$DIFF_MIN" "$DIFF_SEC")
}

function cargo_install
{
	local BINNAME="$1"
	local CRATENAME="$2"
	local HTTPS_URL="$3"
	local TARGET="$4"
	local TGTDIR="$5"
	local OPENSSL_DIR="$TEMPDIR/openssl-dir"
	#type ccache > /dev/null 2>&1 && CC="ccache musl-gcc" || CC="musl-gcc"
	CC="musl-gcc"
	# Binaries go into subfolder named ./bin underneath --root
	if [[ "${CRATENAME:0:1}" == "@" ]]; then
		( set -x; env OPENSSL_STATIC=1 OPENSSL_DIR="$OPENSSL_DIR" CC="$CC" cargo install --target "$TARGET" --target-dir "$TGTDIR/crates/$CRATENAME" --root "$TGTDIR" --git "$HTTPS_URL" --branch "${CRATENAME:1:${#CRATENAME}}" ) && return 0 || return 1
	elif [[ "${CRATENAME:0:1}" == "~" ]]; then
		( set -x; env OPENSSL_STATIC=1 OPENSSL_DIR="$OPENSSL_DIR" CC="$CC" cargo install --target "$TARGET" --target-dir "$TGTDIR/crates/$CRATENAME" --root "$TGTDIR" --git "$HTTPS_URL" --tag "${CRATENAME:1:${#CRATENAME}}" ) && return 0 || return 1
	else
		( set -x; env OPENSSL_STATIC=1 OPENSSL_DIR="$OPENSSL_DIR" CC="$CC" cargo install --target "$TARGET" "$CRATENAME" --target-dir "$TGTDIR/crates/$CRATENAME" --root "$TGTDIR" ) && return 0 || return 1
	fi
	if [[ -x "$TGTDIR/bin/$BINNAME" ]]; then
		if ! ldd "$TGTDIR/bin/$BINNAME"|grep -q 'statically linked'; then
			echo -e "${cY}WARNING:${cZ} ${cW}$BINNAME${cZ} (crate ${cW}$CRATENAME${cZ}) did not come out statically linked!"
		fi
	elif [[ ! -f "$TGTDIR/bin/$BINNAME" ]]; then
		echo -e "${cY}WARNING:${cZ} did not find a file named ${cW}$BINNAME${cZ} for crate ${cW}$CRATENAME${cZ}. Do the crate name and binary name differ?"
	fi
}

function simple_install
{
	# if crate name is some special marker (e.g. .), use cargo install --git $URL
	local TGTDIR="$2"
	# Cut the shortest match from back
	local CRATENAME="${1%:*}"
	# ... longest match from start
	local GITHUB_URL="https://github.com/${1##*:}"
	local BINNAME="${CRATENAME##*:}"
	if [[ -n "$BINNAME" ]] && [[ "$BINNAME" != "$CRATENAME" ]]; then
		CRATENAME=${CRATENAME%:*}
	fi
	cargo_install "$BINNAME" "$CRATENAME" "$GITHUB_URL" "$TARGET" "$TGTDIR" "$OPENSSL_DIR" || exit 1
}

function strip_and_store_binaries
{
	local SRCDIR="$1"
	local NOWDATE=$(date +"%Y-%m-%dT%H-%M-%S")
	local TGTDIR="$SRCDIR/${NOWDATE}_rust-cli-tools" # output folder ... inside temporary folder until we're successful
	( cd "${TGTDIR%/*}"; set -x; mkdir -p "${TGTDIR##*/}"/{stripped,unstripped} ) || { echo -e "${cR}ERROR:${cZ} failed to create staging area for output"; exit 1; }
	( set -x; cp -a "$SRCDIR/bin"/* "$TGTDIR/unstripped/" ) || { echo -e "${cR}ERROR:${cZ} failed to copy unstripped binaries"; exit 1; }
	# Strip binaries into different path
	find "$TGTDIR" -type f -executable -printf '%P\n'|while read fname; do
		( cd "$TGTDIR"; set -x; strip -o "${fname//unstripped/stripped}" --strip-unneeded "$fname" ) || { echo -e "${cR}ERROR:${cZ} failed to process ${cW}$fname${cZ}"; exit 1; }
		if ! ldd "$TGTDIR/$fname"|grep -q 'statically linked'; then
			echo "WARNING: $fname did not come out statically linked!"|tee -a "$TGTDIR/warnings.txt"
		fi
	done || { echo -e "${cR}ERROR:${cZ} failed to process unstripped files"; exit 1; }
	# Now compute the hashes
	find "$TGTDIR" -type f -executable -printf '%P\n'|sort|while read fname; do
		( cd "$TGTDIR"; set -x; sha256sum $fname ) || { echo -e "${cR}ERROR:${cZ} failed to compute hash for ${cW}$fname${cZ}"; exit 1; }
	done | tee "$TGTDIR/SHA256SUMS"
	cargo install --root "$SRCDIR" --list|tee "$TGTDIR/manifest.txt"
	( CURRDIR="$(pwd)"; set -x; tar -cJvf "$CURRDIR/${NOWDATE}_rust-cli-tools.txz" -C "$TGTDIR" . ) || { echo -e "${cR}ERROR:${cZ} failed to package built binaries"; exit 1; }
}

# Ensure we clean up after ourselves in any case
let TIME_START=$(date +%s)
trap 'echo "Removing temporary directory"; ( set -x; rm -rf "'$TEMPDIR'" ); trap - INT TERM EXIT; exit $?' INT TERM EXIT
echo -e "${cW}INFO:${cZ} building OpenSSL"
openssl_build || exit 1
for tool in $SIMPLE_INSTALLS; do
	simple_install "$tool" "$TEMPDIR"
done
strip_and_store_binaries "$TEMPDIR"
# Clean exit
trap - INT TERM EXIT
let TIME_END=$(date +%s)
show_time_diff $TIME_START $TIME_END "Overall runtime: %s (m:ss) with $PM parallel job(s)"
