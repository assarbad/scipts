#!/usr/bin/env bash
[[ -t 1 ]] && { cG="\e[1;32m"; cR="\e[1;31m"; cB="\e[1;34m"; cW="\e[1;37m"; cY="\e[1;33m"; cG_="\e[0;32m"; cR_="\e[0;31m"; cB_="\e[0;34m"; cW_="\e[0;37m"; cY_="\e[0;33m"; cZ="\e[0m"; export cR cG cB cY cW cR_ cG_ cB_ cY_ cW_ cZ; }
TOOLS_NEEDED="touch cat dirname readlink rm rmdir grep git date make cp date gcc find sha256sum tr"
for tool in $TOOLS_NEEDED; do type $tool > /dev/null 2>&1 || { echo -e "${cR}ERROR:${cZ} couldn't find '$tool' which is required by this script."; exit 1; }; done
pushd $(dirname $0) > /dev/null; CURRABSPATH=$(readlink -nf "$(pwd)"); popd > /dev/null; # Get the directory in which the script resides
( [[ -n "$DEBUG" ]] || [[ -n "$DBG" ]] ) && { DBG=1; DEBUG=1; DBGCONFIGURE="$SHELL -x "; set -x; }
LOCKFILE="${TMPDIR=/tmp}/${CURRABSPATH//\//_}${0##*/}.lock"
MEANDMYSELF=${0##*/}
RELEASE_TAG="${LLVM_RELEASE:-llvmorg-11.0.0}"
GITREPO="https://github.com/llvm/llvm-project.git"
BINUTILS_RELEASE="${BINUTILS_RELEASE:-binutils-2_35_1}"
TAR_TAG="${TAR_TAG:-LLVM}"
INSTALL_TO=${INSTALL_TO:-$HOME/bin/$TAR_TAG}
BASEDIR="${BASEDIR:-$(pwd)}"
TARGETS="${TARGETS:-all}"
# The full list is: clang;clang-tools-extra;compiler-rt;debuginfo-tests;libc;libclc;libcxx;libcxxabi;libunwind;lld;lldb;openmp;parallel-libs;polly;pstl
PROJECTS="${PROJECTS:-clang,clang-tools-extra,lld}"
RUNTIMES="${RUNTIMES:-compiler-rt,libcxx,libcxxabi,libunwind}"
#ALL_LDFLAGS=${ALL_LDFLAGS:- -l:libc++.a -l:libc++abi.a -l:libunwind.a -ldl}
#				${USE_CLANG:+-DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS:-$ALL_LDFLAGS}}
#				${USE_CLANG:+-DCMAKE_MODULE_LINKER_FLAGS=${CMAKE_MODULE_LINKER_FLAGS:-$ALL_LDFLAGS}}
#				${USE_CLANG:+-DCMAKE_SHARED_LINKER_FLAGS=${CMAKE_SHARED_LINKER_FLAGS:-$ALL_LDFLAGS}}
BUILD_TYPE="${BUILD_TYPE:-Release}"
CMAKE_GENERATOR="${CMAKE_GENERATOR:-Unix Makefiles}"
ORIG_CC=${CC:-gcc}
ORIG_CXX=${CXX:-g++}
CLANG=${CLANG:-clang}
CLANGPPLUS=${CLANGPPLUS:-clang++}
let NOOPTIONAL=0
# libedit-dev swig doxygen graphviz
# https://salsa.debian.org/pkg-llvm-team/llvm-toolchain/
CMDLINE_OPTIONS="h?b:BcCe:gGi:InoOPpr:t:Tu:vxX"

function show_help
{
	local RELEASE_TAG="$1"
	echo -e "Syntax: $MEANDMYSELF [-h|-?] [-B] [-C|-c|-p] [-r <version>] [-g|-G] [-i <install-dir>] [-O|-o] [-I] [-t <targets>] [-v] [-P]"
	echo -e "\t${cW}-h | -?${cZ}"
	echo -e "\t  Show this help"
	echo -e "\t${cW}-b${cZ} <RelWithDebInfo|Release|MinSizeRel|Debug>"
	echo -e "\t  Pick a build type. Can also be done by setting env. variable ${cW}BUILD_TYPE${cZ}."
	echo -e "\t  This defaults to ${cW}BUILD_TYPE=${BUILD_TYPE}${cZ}."
	echo -e "\t${cW}-B${cZ}"
	echo -e "\t  Do not actually build anything, but check out and prepare build directory."
	echo -e "\t${cW}-c${cZ}"
	echo -e "\t  Only check out updates from upstream, then exit."
	echo -e "\t${cW}-C${cZ}"
	echo -e "\t  Do not check out from the upstream repository."
	echo -e "\t${cW}-e${cZ} <projects> (default=${cW}$PROJECTS${cZ})"
	echo -e "\t  Enable projects (comma/semi-colon-separated list) for LLVM/Clang build."
	echo -e "\t${cW}-g${cZ}"
	echo -e "\t  Garbage collect after checkout."
	echo -e "\t${cW}-G${cZ}"
	echo -e "\t  Garbage collect aggressively (${cW}git gc --aggressive${cZ}) after checkout."
	echo -e "\t${cW}-i${cZ} <install-dir>"
	echo -e "\t  Set the installation directory. Can also be done by setting ${cW}INSTALL_TO${cZ}."
	echo -e "\t  This defaults to ${cW}INSTALL_TO=${INSTALL_TO}${cZ}."
	echo -e "\t${cW}-I${cZ}"
	echo -e "\t  Do not install after building the targets."
	echo -e "\t${cW}-n${cZ}"
	echo -e "\t  Generate ${cW}Ninja${cZ} files (instead of ${cW}$CMAKE_GENERATOR${cZ})."
	echo -e "\t  ${cY}NB:${cZ} requires ${cW}ninja${cZ}."
	if [[ -e "/etc/debian_version" ]]; then
		echo -e "\t  ${cY}On Debian/Ubuntu:${cZ} requires package ${cW}ninja-build${cZ}."
	fi
	echo -e "\t${cW}-o${cZ}"
	echo -e "\t  Only build 'optional' components (i.e. binutils). Skips building Clang/LLVM."
	echo -e "\t  ${cY}NB:${cZ} requires ${cW}bison flex makeinfo${cZ}, uses CC=${ORIG_CC} and CXX=${ORIG_CXX}!"
	if [[ -e "/etc/debian_version" ]]; then
		echo -e "\t  ${cY}On Debian/Ubuntu:${cZ} requires packages ${cW}bison flex texinfo${cZ}."
	fi
	echo -e "\t${cW}-O${cZ}"
	echo -e "\t  Do not build 'optional' components (i.e. binutils)."
	echo -e "\t${cW}-p${cZ}"
	echo -e "\t  Same as ${cW}-c${cZ} but also packages the Git repos in a .tar file after bundling them."
	echo -e "\t  ${cY}NB:${cZ} requires ${cW}git tar xz${cZ}."
	echo -e "\t${cW}-r${cZ} <moniker>"
	echo -e "\t  Revives the repositories previously packaged with ${cW}-p${cZ}. Implies ${cW}-c${cZ}."
	echo -e "\t  The moniker is typically a timestamp, e.g. packaged-${cW}\$TIMESTAMP${cZ}.tar."
	echo -e "\t  ${cW}NB:${cZ} to be called from the directory which contains ${MEANDMYSELF}."
	echo -e "\t  ${cY}NB:${cZ} requires a working ${cW}git${cZ}."
	echo -e "\t${cW}-t${cZ} <targets> (default=${cW}$TARGETS${cZ})"
	echo -e "\t  Specify the target architectures (comma/semi-colon-separated list) for LLVM/Clang."
	echo -e "\t${cW}-T${cZ}"
	echo -e "\t  Run tests after building, but before installing LLVM and Clang."
	echo -e "\t${cW}-u${cZ} <runtimes> (default=${cW}$RUNTIMES${cZ})"
	echo -e "\t  Enable runtimes (comma/semi-colon-separated list) for LLVM/Clang build."
	echo -e "\t${cW}-v${cZ}"
	echo -e "\t  Be verbose about the actions (lines get leading '${cB}[DBG]${cZ}' string)."
	echo -e "\t${cW}-V${cZ} <release-tag> ${cY}(if not given defaults to: $RELEASE_TAG)${cZ}"
	echo -e "\t  Tag to build instead of hardcoded default."
	echo -e "\t${cW}-x${cZ}"
	echo -e "\t  Use ${cW}ccache${cZ} to speed up subsequent builds."
	echo -e "\t  ${cY}NB:${cZ} requires ${cW}ccache${cZ}."
	if [[ -e "/etc/debian_version" ]]; then
		echo -e "\t  ${cY}On Debian/Ubuntu:${cZ} requires package ${cW}ccache${cZ}."
	fi
	echo -e "\t${cW}-X${cZ}"
	echo -e "\t  Use ${cW}clang${cZ} to build LLVM and clang (you need a recent clang!)."
	echo -e "\t  ${cY}NB:${cZ} requires ${cW}clang${cZ}/${cW}clang++${cZ} (override with CLANG/CLANGPPLUS)."
	echo ""
	echo -e "${cW}NOTE:${cZ} the main difference between ${cW}-c${cZ} and ${cW}-B${cZ} is that ${cW}-B${cZ} will remove an existing"
	echo -e "      build directory and ${cW}-c${cZ} doesn't touch that at all."
}

function prepare_src
{
	local PRJNAME=${1%%:*}
	local GITCLONE=${1#*:}
	local GITREF=$2
	local GITBASEDIR=${3:-$BASEDIR}
	local PRJ=$(echo "${PRJNAME##*/}"|tr 'a-z' 'A-Z')
	if ((NOCHECKOUT==0)); then
		[[ -d "$GITBASEDIR" ]] || mkdir -p "$GITBASEDIR"
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Working on project $PRJNAME ($GITCLONE), branch/tag = $GITREF."
		if ((REVIVEPKG)); then
			((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Cloning Git bundle if no clone exists."
			if [[ ! -d "$GITBASEDIR/$PRJNAME" ]]; then
				( set -x; git clone ${PRJNAME##*/}-${REVIVETS}.gitbundle "$GITBASEDIR/$PRJNAME" )
				( set -x; git -C "$GITBASEDIR/$PRJNAME" remote set-url origin "${GITCLONE#git clone }" )
				( set -x; git -C "$GITBASEDIR/$PRJNAME" fetch --tags )
			fi
		else
			# Clone the repository if we don't have it
			((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Cloning repository if no clone exists."
			[[ -d "$GITBASEDIR/$PRJNAME" ]] || $GITCLONE "$GITBASEDIR/$PRJNAME"
		fi
		# Sanity check the clone
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Verifying the clone exists now."
		[[ -d "$GITBASEDIR/$PRJNAME/.git" ]] || { echo -e "${cR}ERROR:${cZ} apparently we failed to clone $PRJNAME ($GITCLONE)."; exit 1; }
		# Set the Git stuff according to the docs
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Setting branch.master.rebase to true."
		( cd "$GITBASEDIR/$PRJNAME" && git config branch.master.rebase true ) || { echo -e "${cR}ERROR:${cZ} could not set 'git config branch.master.rebase true' for $PRJNAME."; exit 1; }
		( cd "$GITBASEDIR/$PRJNAME" && echo -en "${cW}$PRJ:${cZ} branch.master.rebase = " && git config --get branch.master.rebase )
		( cd "$GITBASEDIR/$PRJNAME" && if [[ "xtrue" == "x$(git config --get core.bare)" ]]; then git config --bool core.bare false; fi ) || { echo -e "${cR}ERROR:${cZ} could not set 'git config --bool core.bare false' for $PRJNAME."; exit 1; }
		((REVIVEPKG)) && ( cd "$GITBASEDIR/$PRJNAME" && echo -ne "\tHard-resetting ($(git config --get core.bare)) after thawing it.\n\t-> "; git reset --hard )
		# Scrub the working copy
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Cleaning extraneous files from Git clone."
		( cd "$GITBASEDIR/$PRJNAME" && git clean -dfx) || { echo -e "${cR}ERROR:${cZ} failed to 'git clean -dfx' $PRJNAME."; exit 1; }
		# Get latest changes to the Git repo
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Fetching updates from upstream."
		( cd "$GITBASEDIR/$PRJNAME" && ( git fetch && git fetch --tags ) ) || { echo -e "${cY}WARNING:${cZ} failed to 'git fetch' $PRJNAME."; }
		# Prune branches
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Pruning remote branches."
		( cd "$GITBASEDIR/$PRJNAME" && git remote prune origin ) || { echo -e "${cY}WARNING:${cZ} failed to 'git remote prune origin' $PRJNAME."; }
		# Check out the release
		((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Checking out the files on current branch."
		( cd "$GITBASEDIR/$PRJNAME" && echo -en "${cW}$PRJ:${cZ} " && git checkout -f $GITREF ) || { echo -e "${cR}ERROR:${cZ} failed to check out $GITREF for $PRJNAME."; exit 1; }
		if git --git-dir="$GITBASEDIR/$PRJNAME/.git" rev-parse --symbolic --branches|grep -q "$GITREF"; then
			((VERBOSE)) && echo -e "${cB}[DBG:$PRJ]${cZ} Fast-forwarding, if possible."
			( cd "$GITBASEDIR/$PRJNAME" && echo -en "${cW}$PRJ:${cZ} " && git merge --ff-only origin/$GITREF ) || { echo -e "${cR}ERROR:${cZ} failed to fast-forward to origin/$GITREF for $PRJNAME."; exit 1; }
		fi
		((GARBAGECOLLECT)) && ( echo "Now garbage-collecting the repository${GCAGGRESSIVE:+ ($GCAGGRESSIVE)}"; cd "$GITBASEDIR/$PRJNAME" && git gc $GCAGGRESSIVE --prune=all)
	fi
	((ONLYCHECKOUT)) && return
	[[ -d "$GITBASEDIR/build/$PRJNAME" ]] && rm -rf "$GITBASEDIR/build/$PRJNAME"
	mkdir -p "$GITBASEDIR/build/$PRJNAME" || { echo -e "${cR}ERROR:${cZ} could not create build/$PRJNAME directory."; exit 1; }
}

function show_time_diff
{
	local START=$1
	local END=$2
	local MSG=$3
	[[ -n "$MSG" ]] || MSG="Runtime: %s"
	local DIFF=$((END-START))
	local DIFF_MIN=$((DIFF/60))
	local DIFF_SEC=$((DIFF%60))
	printf "$MSG\n" $(printf "%d:%02d" "$DIFF_MIN" "$DIFF_SEC")
}

function assert_tools
{
	local opt=${1:-this script}
	shift
	for tool in "$@"; do
		if ! type $tool > /dev/null 2>&1; then
			echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires ${cW}$tool${cZ} which was not found!"
			exit 1
		fi
	done
}

function freeze_repo
{
	local BASEDIR="$1"
	local TARGETDIR="$2"
	local HASHPROG="$3"
	shift 3
	echo -e "${cW}freeze_repo(${cY}'$BASEDIR', '$TARGETDIR', '$HASHPROG', ${cG}" "$@" "${cW})${cZ}"
	local TIMESTAMP=$(date +%Y-%m-%dT%H-%M-%S)
	local TARNAME="packaged-${TIMESTAMP}-${TAR_TAG}.tar"
	local UNPACKER="unpack-$TIMESTAMP-${TAR_TAG}"
	echo "Packaging the source into $TARNAME"
	(
		trap '( set -x; rm -f "'$BASEDIR/$reponame-$TIMESTAMP.gitbundle'"{,.'${HASHPROG^^}'} "'$BASEDIR/${HASHPROG^^}S'" ); trap - INT TERM EXIT; exit $?' INT TERM EXIT
		cd "$BASEDIR"
		echo "Now bundling repositories"
		find "$@" -type d -name '.git'|while read dname; do
			reponame=${dname%/.git}
			reponame=${reponame##*/}
			( set -x; git -C "$dname" bundle create "$BASEDIR/$reponame-$TIMESTAMP.gitbundle" --all )
			( cd "$BASEDIR"; set -x; $HASHPROG "$reponame-$TIMESTAMP.gitbundle"|tee "$reponame-$TIMESTAMP.gitbundle.${HASHPROG^^}")
		done
		echo "Now packing the contents with tar"
		if [[ "$CURRABSPATH/$MEANDMYSELF" != "$BASEDIR/$MEANDMYSELF" ]]; then
			cp -f "$CURRABSPATH/$MEANDMYSELF" "$BASEDIR/$MEANDMYSELF" || true
		fi
		( cd "$BASEDIR"; ( cat *-$TIMESTAMP.gitbundle.${HASHPROG^^}; $HASHPROG $MEANDMYSELF ) | tee ${HASHPROG^^}S )
		echo -n "" > "$BASEDIR/$MEANDMYSELF.extrafiles"
		for fname in "$@"; do
			if [[ -f "$BASEDIR/$fname" ]]; then
				( \
					cd "$BASEDIR";
					pname="${CACHEDIR##*/}/${fname}"; \
					test -d "${pname%/*}" || mkdir -p "${pname%/*}"; \
					cp -a "$fname" "${pname%/*}"/ ; \
					$HASHPROG "$pname" | tee -a ${HASHPROG^^}S; \
					echo "$pname" | tee -a "./$MEANDMYSELF.extrafiles" \
				)
			fi
		done
		( set -x; tar -C "$BASEDIR" -chf "$TARGETDIR/$TARNAME" $MEANDMYSELF *-$TIMESTAMP.gitbundle{,.${HASHPROG^^}} ${HASHPROG^^}S $(cat $MEANDMYSELF.extrafiles) ) && \
			echo "Find the package under the name $TARNAME"
		if [[ "$CURRABSPATH/$MEANDMYSELF" != "$BASEDIR/$MEANDMYSELF" ]]; then
			rm -f "$BASEDIR/$MEANDMYSELF"
		fi
		cat - >> "$TARGETDIR/$UNPACKER" <<-EOF
			#!/usr/bin/env bash
			TS="$TIMESTAMP"
			T="${TARNAME//$TIMESTAMP/\$TS}"
			D="\$TS-${TAR_TAG}"
			R="./$MEANDMYSELF"
			U="${UNPACKER//$TIMESTAMP/\$TS}"
			echo "Unpacking \$T into ./\$D \$( [[ "x\$1" == "x-c" ]] && echo "and removing archive plus unpacker upon success" )"
			mkdir "./\$D" && tar -C "./\$D" -xf "./\$T" && ( cd "./\$D"; $HASHPROG -c ${HASHPROG^^}S || exit \$?; [[ -x \$R ]] && \$R -r "\$TS" )
			[[ "x\$1" == "x-c" ]] && { echo "Also removing \$U and \$T"; rm -f "./\$U" "./\$T"; }
		EOF
		chmod +x "$TARGETDIR/$UNPACKER"
		rm -f "$BASEDIR"/*-$TIMESTAMP.gitbundle{,.${HASHPROG^^}} "$BASEDIR"/${HASHPROG^^}S
		trap - INT TERM EXIT
	)
}

[[ "$1" == "--help" ]] && { show_help "$RELEASE_TAG"; exit 0; }
while getopts "$CMDLINE_OPTIONS" opt; do
	case "$opt" in
	h|\?)
		show_help "$RELEASE_TAG"
		exit 0
		;;
	b)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		BUILD_TYPE="$OPTARG"
		;;
	B)  NOBUILD=1
		echo -e "${cY}Skipping build${cZ}"
		;;
	c)  ((NOCHECKOUT)) && { echo -e "${cR}ERROR:${cZ} ${cY}-C${cZ} and ${cY}-c${cZ}/${cY}-p${cZ} are mutually exclusive."; exit 1; }
		ONLYCHECKOUT=1
		assert_tools "$opt" git
		echo "Doing only a checkout"
		;;
	C)  ((ONLYCHECKOUT)) && { echo -e "${cR}ERROR:${cZ} ${cY}-C${cZ} and ${cY}-c${cZ}/${cY}-p${cZ} are mutually exclusive."; exit 1; }
		NOCHECKOUT=1
		echo -e "${cY}Skipping checkout${cZ}"
		;;
	e)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		PROJECTS="$OPTARG"
		;;
	g)  GARBAGECOLLECT=1
		;;
	G)  GARBAGECOLLECT=1
		GCAGGRESSIVE="--aggressive"
		;;
	i)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		INSTALL_TO="$OPTARG"
		;;
	I)  NOINSTALL=1
		;;
	n)  CMAKE_GENERATOR="Ninja"
		assert_tools "$opt" ninja
		;;
	o)  ((NOOPTIONAL)) && { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} and ${cY}-O${cZ} are mutually exclusive."; exit 1; }
		ONLYOPTIONAL=1
		NOOPTIONAL=0
		assert_tools "$opt" bison flex makeinfo
		echo -e "${cY}Building only optional components${cZ}"
		;;
	O)  ((ONLYOPTIONAL)) && { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} and ${cY}-o${cZ} are mutually exclusive."; exit 1; }
		NOOPTIONAL=1
		ONLYOPTIONAL=0
		echo -e "${cY}Skipping build of optional components${cZ}"
		;;
	P)  echo -e "${cY}WARNING:${cZ} ${cW}-$opt${cZ} ignored for compatibility reasons."
		;;
	p)  ((NOCHECKOUT)) && { echo -e "${cR}ERROR:${cZ} ${cY}-C${cZ} and ${cY}-p${cZ}/${cY}-c${cZ} are mutually exclusive."; exit 1; }
		ONLYCHECKOUT=1
		BUNDLEGIT=1
		assert_tools "$opt" cp sha256sum tar tee xz
		echo "Doing only a checkout and then packaging bundled clones into a .tar file."
		;;
	r)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		((NOCHECKOUT)) || ONLYCHECKOUT=1
		REVIVEPKG=1
		REVIVETS="$OPTARG"
		assert_tools "$opt" git
		echo "Reviving Git bundles, followed a checkout."
		;;
	t)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		TARGETS="$OPTARG"
		;;
	T)  RUN_TESTS=1
		;;
	u)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		RUNTIMES="$OPTARG"
		;;
	v)  VERBOSE=1
		((VERBOSE)) && echo -e "${cB}[DBG]${cZ} Enabling verbose run."
		;;
	V)  [[ -n "$OPTARG" ]] || { echo -e "${cR}ERROR:${cZ} ${cY}-$opt${cZ} requires an argument." >&2; exit 1; }
		RELEASE_TAG="$OPTARG"
		;;
	x)  USE_CCACHE=1
		assert_tools "$opt" ccache
		echo -e "${cY}Using ${cW}ccache${cY} to speed up subsequent builds${cZ}"
		;;
	X)  ((ONLYOPTIONAL)) && { echo -e "${cW}INFO:${cZ} ignoring ${cY}-$opt${cZ} as we aren't going to build Clang/LLVM (${cY}-o${cZ} used)."; }
		USE_CLANG=1
		assert_tools "$opt" "${CLANG}" "${CLANGPPLUS}"
		echo -e "${cY}Using ${cW}clang${cY} to build Clang/LLVM${cZ} (but _not_ Binutils!)"
		;;
	esac
done
# Check for availability of cmake if we're going to build
if ((ONLYCHECKOUT==0)) && ((NOBUILD==0)); then
	assert_tools cmake
fi
if ! (set -o noclobber; echo "$$" > "$LOCKFILE") 2> /dev/null; then
	echo -e "${cR}ERROR:${cZ} Lock failed, PID $(cat "$LOCKFILE") [$LOCKFILE]" >&2
	exit 1
fi
trap 'rm -f "$LOCKFILE"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
echo -e "\tWorking directory: $BASEDIR"
let PM=$(grep -c processor /proc/cpuinfo || echo 2)
((VERBOSE)) && echo -e "${cB}[DBG]${cZ} Number of parallel jobs, based on processor count: $PM."
let TIME_START=$(date +%s)
((VERBOSE)) && echo -e "${cB}[DBG]${cZ} Preparing core projects."
# Preparational steps
for i in "llvm:git clone https://github.com/llvm/llvm-project.git"; do
	prepare_src "$i" "$RELEASE_TAG" "$BASEDIR"
done
((VERBOSE)) && echo -e "${cB}[DBG]${cZ} Preparing third-party projects."
if ((NOOPTIONAL == 0)); then
	prepare_src "3rdparty/binutils:git clone git://sourceware.org/git/binutils-gdb.git" "$BINUTILS_RELEASE" "$BASEDIR"
fi
if ((USE_CLANG)); then
	if type "${CLANG}" > /dev/null 2>&1 && type "${CLANGPPLUS}" > /dev/null 2>&1; then
		CC="$(which "${CLANG}")"
		CXX="$(which "${CLANGPPLUS}")"
	fi
	if [[ -z "$CC" ]] || [[ -z "$CXX" ]]; then
		echo -e "${cR}ERROR:${cZ} couldn't find 'CC=$CC' or 'CXX=$CXX'."
		exit 1
	fi
else
	CC="${ORIG_CC}"
	CXX="${ORIG_CXX}"
fi
let TIME_GIT=$(date +%s)
if ((ONLYCHECKOUT==0)) && ((NOBUILD==0)); then
	((VERBOSE)) && echo -e "${cB}[DBG]${cZ} Doing build for $TARGETS into $INSTALL_TO."
	if [[ -d "$BASEDIR/build/llvm" ]]; then
		if ((ONLYOPTIONAL == 0)); then
			pushd "$BASEDIR/build/llvm" || { echo -e "${cR}ERROR:${cZ} could not ${cW}pushd${cZ}."; exit 1; }
			( set -x; \
				cmake ${TRACE:+--trace} ${TRACE:--Wno-dev} -G "$CMAKE_GENERATOR" \
				${USE_CLANG:+-DCMAKE_C_FLAGS=-Wno-unused-command-line-argument} \
				${USE_CLANG:+-DCMAKE_CXX_FLAGS=-Wno-unused-command-line-argument} \
				${CMAKE_C_STANDARD_COMPUTED_DEFAULT:+-DCMAKE_C_STANDARD_COMPUTED_DEFAULT=$CMAKE_C_STANDARD_COMPUTED_DEFAULT} \
				${CMAKE_CXX_STANDARD_COMPUTED_DEFAULT:+-DCMAKE_CXX_STANDARD_COMPUTED_DEFAULT=$CMAKE_CXX_STANDARD_COMPUTED_DEFAULT} \
				${CMAKE_C_COMPILER_ID:+-DCMAKE_C_COMPILER_ID=$CMAKE_C_COMPILER_ID} \
				${MAKE_CXX_COMPILER_ID:+-DCMAKE_CXX_COMPILER_ID=$CMAKE_CXX_COMPILER_ID} \
				${CC:+-DCMAKE_C_COMPILER=$CC} \
				${CXX:+-DCMAKE_CXX_COMPILER=$CXX} \
				${CMAKE_C_COMPILER_VERSION:+-DCMAKE_C_COMPILER_VERSION=$CMAKE_C_COMPILER_VERSION} \
				${CMAKE_CXX_COMPILER_VERSION:+-DCMAKE_CXX_COMPILER_VERSION=$CMAKE_CXX_COMPILER_VERSION} \
				${USE_CCACHE:+-DLLVM_CCACHE_BUILD=ccache} \
				${VERBOSE:+-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON} \
				${USE_CLANG:+-DLLVM_ENABLE_LIBCXX:BOOL=${LLVM_ENABLE_LIBCXX:-ON}} \
				${USE_CLANG:+-DLIBCXX_USE_COMPILER_RT=${LIBCXX_USE_COMPILER_RT:-ON}} \
				${USE_CLANG:+-DLIBCXXABI_USE_COMPILER_RT=${LIBCXXABI_USE_COMPILER_RT:-ON}} \
				${USE_CLANG:+-DLLVM_STATIC_LINK_CXX_STDLIB:BOOL=${LLVM_STATIC_LINK_CXX_STDLIB:-ON}} \
				${USE_CLANG:+-DLIBCXXABI_ENABLE_STATIC:BOOL=${LIBCXXABI_ENABLE_STATIC:-ON}} \
				${USE_CLANG:+-DLIBUNWIND_ENABLE_STATIC:BOOL=${LIBUNWIND_ENABLE_STATIC:-ON}} \
				${USE_CLANG:+-DLIBCXXABI_ENABLE_STATIC_UNWINDER:BOOL=${LIBCXXABI_ENABLE_STATIC_UNWINDER:-ON}} \
				${USE_CLANG:+-DLIBCXX_ENABLE_STATIC_ABI_LIBRARY:BOOL=${LIBCXX_ENABLE_STATIC_ABI_LIBRARY:-ON}} \
				${USE_CLANG:+-DLIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY:BOOL=${LIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY:-ON}} \
				${USE_CLANG:+-DLLVM_ENABLE_EH:BOOL=${LLVM_ENABLE_EH:-ON}} \
				${USE_CLANG:+-DLLVM_ENABLE_RTTI:BOOL=${LLVM_ENABLE_RTTI:-ON}} \
				${USE_CLANG:+-DLLVM_ENABLE_LLD:BOOL=${LLVM_ENABLE_LLD:-ON}} \
				${LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN:+-DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN:BOOL=$LLVM_FORCE_USE_OLD_TOOLCHAIN} \
				${LLVM_FORCE_USE_OLD_TOOLCHAIN:+-DLLVM_FORCE_USE_OLD_TOOLCHAIN:BOOL=$LLVM_FORCE_USE_OLD_TOOLCHAIN} \
				${LLVM_ENABLE_Z3_SOLVER:+-DLLVM_ENABLE_Z3_SOLVER:BOOL=$LLVM_ENABLE_Z3_SOLVER} \
				-DLLVM_INCLUDE_EXAMPLES:BOOL=${LLVM_INCLUDE_EXAMPLES:-OFF} \
				-DLLVM_INCLUDE_BENCHMARKS:BOOL=${LLVM_INCLUDE_BENCHMARKS:-OFF} \
				-DLLVM_ENABLE_ZLIB:BOOL=${LLVM_ENABLE_ZLIB:-ON} \
				-DLLVM_ENABLE_ASSERTIONS:BOOL=${LLVM_ENABLE_ASSERTIONS:-OFF} \
				-DLLVM_ENABLE_PROJECTS="${PROJECTS//,/;}" \
				-DLLVM_ENABLE_RUNTIMES="${RUNTIMES//,/;}" \
				-DCMAKE_INSTALL_PREFIX="$INSTALL_TO" \
				-DLLVM_BUILD_DOCS=OFF \
				-DLLVM_ENABLE_DOXYGEN=OFF \
				-DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
				-DLLVM_TARGETS_TO_BUILD="${TARGETS//,/;}" \
				"$BASEDIR/llvm/llvm" ) || { echo -e "${cR}ERROR:${cZ}  ${cW}cmake${cZ} failed."; exit 1; }
			let TIME_CONFIGURE=$(date +%s)
			# FIXME/TODO: add _options_ to enable optimizations and disable assertions somehow?! (i.e. don't hardcode them)
			( set -x; env ENABLE_OPTIMIZED=1 ${DBG:+TOOL_VERBOSE=1} cmake --build . )  || { echo -e "${cR}ERROR:${cZ}  ${cW}cmake --build .${cZ} failed."; exit 1; }
			let TIME_MAKE=$(date +%s)
			if ((RUN_TESTS)); then
				( set -x; cmake --build . --target test )  || { echo -e "${cR}ERROR:${cZ}  ${cW}cmake --build . --target test${cZ} failed."; exit 1; }
			fi
			if ((NOINSTALL == 0)); then
				if [[ -d "$INSTALL_TO" ]]; then
					OLD_INSTALL_TO="backup-${INSTALL_TO##*/}-$(date -r "$INSTALL_TO" +"%Y-%m-%dT%H-%M-%S")"
					echo -e "${cW}NOTE:${cZ} $INSTALL_TO exists, renaming it to $OLD_INSTALL_TO."
					mv "$INSTALL_TO" "${INSTALL_TO%/*}/$OLD_INSTALL_TO" || { echo -e "${cR}ERROR:${cZ} failed to move $INSTALL_TO out of the way."; exit 1; }
					trap 'rm -f "$LOCKFILE"; echo -e "'"${cW}INFO:${cZ}"' Moving back your previous LLVM from '$OLD_INSTALL_TO' due to signal"; rm -rf "'$INSTALL_TO'"; mv "'${INSTALL_TO%/*}/$OLD_INSTALL_TO'" "'$INSTALL_TO'"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
				fi
				( set -x; cmake -P cmake_install.cmake )  || { echo -e "${cR}ERROR:${cZ}  ${cW}cmake -P cmake_install.cmake${cZ} failed."; exit 1; }
				trap 'rm -f "$LOCKFILE"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
			fi
			popd || { echo -e "${cR}ERROR:${cZ} could not ${cY}popd${cZ}."; exit 1; }
		fi
		let TIME_INSTALL=$(date +%s)
		if ((NOOPTIONAL == 0)); then
		(
			pushd "$BASEDIR/build/3rdparty/binutils" || { echo -e "${cR}ERROR:${cZ} could not ${cW}pushd${cZ}."; exit 1; }
			make -C "$BASEDIR/3rdparty/binutils" distclean || true
			git -C "$BASEDIR/3rdparty/binutils" clean -dfx
			( set -x; env CC="${USE_CCACHE:+ccache }${ORIG_CC}" CXX="${USE_CCACHE:+ccache }${ORIG_CXX}" "$BASEDIR/3rdparty/binutils/configure" --disable-werror --disable-gold --enable-ld --program-suffix=.$BINUTILS_RELEASE --prefix=$INSTALL_TO ) || { echo -e "${cR}ERROR:${cZ} ${cY}./configure${cZ} failed."; exit 1; }
			if ((NOINSTALL == 0)); then
				( set -x; make -j $PM && make install ) || { echo -e "${cR}ERROR:${cZ} ${cW}make${cZ} or ${cW}make install${cZ} failed."; exit 1; }
			fi
			popd || { echo -e "${cR}ERROR:${cZ} could not ${cW}popd${cZ}."; exit 1; }
		)
		fi
		let TIME_BINUTILS=$(date +%s)
	else
		echo -e "${cR}ERROR:${cZ} no directory $BASEDIR/build/llvm."
		exit 1
	fi
fi
if ((ONLYCHECKOUT==1)) || ((NOBUILD==1)); then
	show_time_diff $TIME_START $TIME_GIT      "Git operations took: %s"
fi
if ((BUNDLEGIT==1)); then
	freeze_repo "$BASEDIR" "$BASEDIR" sha256sum llvm 3rdparty
	let TIME_GITBUNDLE=$(date +%s)
	show_time_diff $TIME_GIT $TIME_GITBUNDLE                "Packaging took:      %s"
fi
let TIME_END=$(date +%s)
if ((ONLYCHECKOUT==0)) && ((NOBUILD==0)); then
	if ((ONLYOPTIONAL == 0)); then
		show_time_diff $TIME_GIT $TIME_CONFIGURE            "CMake took:          %s"
		if ((NOINSTALL == 0)); then
			show_time_diff $TIME_MAKE $TIME_INSTALL         "Installation took:   %s"
		fi
	fi
	if ((NOOPTIONAL == 0)); then
		show_time_diff $TIME_INSTALL $TIME_BINUTILS         "Binutils took:       %s"
	fi
	(HASHFILE=$(mktemp); cd "$INSTALL_TO" && find -type f -exec sha256sum {} + > "$HASHFILE" && mv "$HASHFILE" "$INSTALL_TO/SHA256SUMS")
fi
show_time_diff $TIME_START $TIME_END                        "Overall runtime:     %s (m:ss) with $PM parallel job(s)"
exit 0
