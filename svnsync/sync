#!/usr/bin/env bash
[[ -t 1 ]] && { cG="\e[1;32m"; cR="\e[1;31m"; cB="\e[1;34m"; cW="\e[1;37m"; cY="\e[1;33m"; cG_="\e[0;32m"; cR_="\e[0;31m"; cB_="\e[0;34m"; cW_="\e[0;37m"; cY_="\e[0;33m"; cZ="\e[0m"; export cR cG cB cY cW cR_ cG_ cB_ cY_ cW_ cZ; }
[[ -n "$DEBUG" || -n "$DBG" ]] && set -x
CURRABSPATH=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd) # Get the directory in which the script resides
LOCKFILE="${TMPDIR=/tmp}/${CURRABSPATH//\//_}${0##*/}.lock"
MEANDMYSELF=${0##*/}
for tool in awk grep nice svn svnsync tee; do type $tool > /dev/null 2>&1 || { echo -e "${cR}ERROR:${cZ} couldn't find '$tool' which is required by this script."; exit 1; }; done
[[ -n "$1" ]] && { for tool in 7za sha1sum svnadmin; do type $tool > /dev/null 2>&1 || { echo -e "${cR}ERROR:${cZ} couldn't find '$tool' which is required by this script."; exit 1; }; done; }
let DIVIDER=1000

function show_time_diff
{
	local START=$1
	local END=$2
	local MSG=$3
	[[ -n "$MSG" ]] || MSG="Runtime: %s"
	local DIFF=$((END-START))
	local DIFF_MIN=$((DIFF/60))
	local DIFF_SEC=$((DIFF%60))
	printf "$MSG\n" $(printf "%d:%02d" "$DIFF_MIN" "$DIFF_SEC")
}

function show_help
{
	echo -e "${cW}$MEANDMYSELF${cZ} can be used to call svnsync on the local mirror repository inside whose"
	echo -e "file system location it resides. So this can be used to keep local Subversion"
	echo -e "mirror repositories in sync with their remote counterparts."
	echo ""
	echo -e "Called without any arguments, this script can conveniently be used inside a cron"
	echo -e "job. Alternatively it can be called with the path to an archive to be created"
	echo -e "from a dump of said local mirror repository."
	echo ""
	echo -e "Syntax: $MEANDMYSELF [-h|-?|-a] [archive-path]"
	echo -e "\t${cW}-h | -?${cZ}"
	echo -e "\t  Show this help"
	echo -e "\t${cW}-a${cZ}"
	echo -e "\t  Dump all revisions before packing. This only makes sense in the mode"
	echo -e "\t  which dumps and packages your local mirror repository."
	echo -e "\t  Without this option the highest full $DIVIDER revisions will be used as"
	echo -e "\t  upper boundary of the revision range to dump."
	echo -e "\t${cW}-d${cZ}"
	echo -e "\t  Dry run. In case you merely want to see what the outcome might be."
	echo -e "\t  Even the dry run uses a lock file."
	echo ""
	echo -e "${cW}NOTE:${cZ} the ${cW}archive-path${cZ} can be used to dump the local mirror repository using"
	echo -e "      ${cW}svnadmin${cZ} and pack the resulting file using ${cW}7z${cZ}."
	echo -e "      The token string ${cW}REVNO${cZ} can be used in the given archive name and will be"
	echo -e "      replaced by the revision range dumped and archived."
	echo -e "${cW}ALSO NOTE:${cZ} Do ${cW}not${cZ} include a file extension. It will be added automatically."
}

[[ "$1" == "--help" ]] && { show_help; exit 0; }
while getopts "h?ad" opt; do
	case "$opt" in
	h|\?)
		show_help
		exit 0
		;;
	a)  ALLREVS=1
		;;
	d)  DRYRUN=1
		echo "Dry run requested"
		;;
	esac
	shift $((OPTIND-1))
done

if ! (set -o noclobber; echo "$$" > "$LOCKFILE") 2> /dev/null; then
	echo -e "${cR}ERROR:${cZ} Lock failed, PID $(cat "$LOCKFILE")" >&2
	exit 1
fi
trap 'rm -f "$LOCKFILE"; trap - INT TERM EXIT; exit $?' INT TERM EXIT

SVNPATH="file://$CURRABSPATH"
REVNO=$(svn info "$SVNPATH"|awk '/^Revision:/ {print $2}')
if ((REVNO == 0)); then
	echo -e "${cR}ERROR:${cZ} the upper revision number could not be determined from '$SVNPATH'." >&2
	exit 1
fi

if [[ -z "$1" ]]; then
	echo -e "${cG}Highest revision (before):${cZ} ${cW}$REVNO${cZ}"
	echo -e "${cG}URL:${cZ} ${cW}$(svn propget svn:sync-from-url --revprop -r 0 "$SVNPATH")${cZ}"
	if ((DRYRUN==0)); then
		svn propdel --revprop -r0 svn:sync-lock "$SVNPATH"
		svnsync --non-interactive sync "$SVNPATH" && touch "$CURRABSPATH"
	fi
	REVNO=$(svn info "$SVNPATH"|awk '/^Revision:/ {print $2}')
	echo -e "${cG}Highest revision  (after):${cZ} ${cW}$REVNO${cZ}"
else
	echo -e "Local mirror repository: ${cW}$CURRABSPATH${cZ}"
	REV0=0
	if ((ALLREVS==0)); then
		REVDIV=$((REVNO%DIVIDER))
		REVNO=$((REVNO-REVDIV))
	fi
	FNAME="${1//REVNO/rev${REV0}_to_${REVNO}}"
	[[ "${FNAME##*/}" == "$FNAME" ]] && FNAME="./$FNAME"
	DUMPNAME="${FNAME}.svndump"
	ARCHNAME="${FNAME}.7z"
	if [[ -e "$ARCHNAME" ]]; then
		echo -e "${cR}ERROR:${cZ} ${cW}$ARCHNAME${cZ} already exists. Move it out of the way before trying again." >&2
		exit 1
	fi
	echo -e "Dumping to ${cW}$DUMPNAME${cZ} and packaging as ${cW}$ARCHNAME${cZ}."
	if ((DRYRUN==0)); then
		if [[ ! -e "$ARCHNAME" ]]; then
			let TIME_START=$(date +%s)
			trap 'echo "Cleaning up ${FNAME##*/} due to error or interrupt."; rm -f "$LOCKFILE" "$DUMPNAME" "$ARCHNAME" "$ARCHNAME.sha1sum"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
			svnadmin dump -r $REV0:$REVNO --deltas --incremental "$CURRABSPATH" > "$DUMPNAME" && \
				ls -ld "$DUMPNAME" && \
				nice 7z a -t7z -y -mx9 -m0=lzma2 -ms=on "-w${DUMPNAME%/*}" "$ARCHNAME" "$DUMPNAME" && \
				( cd "${FNAME%/*}" && sha1sum "${DUMPNAME##*/}" "${ARCHNAME##*/}"|tee "${ARCHNAME##*/}.sha1sum" ) && \
				rm -f "$DUMPNAME"
			show_time_diff $TIME_START $(date +%s) "Packaging $FNAME took: %s"
			trap 'rm -f "$LOCKFILE"; trap - INT TERM EXIT; exit $?' INT TERM EXIT
		fi
	fi
fi
